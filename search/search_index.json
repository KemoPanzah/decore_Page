{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"blog/","title":"Blog","text":""},{"location":"de/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"de/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"de/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"de/test/","title":"Test Test Test","text":"<p>Das ist ein Deutscher Text. heirs sind einige W\u00f6rter, die in einem Deutschen Text vorkommen k\u00f6nnen.</p>"},{"location":"de/test/#classes.decore_fields","title":"<code>classes.decore_fields</code>","text":""},{"location":"de/test/#classes.decore_fields.BackrefMetaField","title":"<code>BackrefMetaField</code>","text":"<p>Warning</p> <p>Der Name des BackRefMetaField muss mit dem Namen des angegebenen backref im ForeignKey oder ManyToMany Feld im Referenzmodell \u00fcbereinstimmen.</p> <p>Das BackrefMetaField wird ben\u00f6tigt damit decore Front Beziehungen zwischen Modellen darstellen kann. Es kann z.B. dem Filter oder einem Formular zugewiesen werden. Es ist ein MetaField und erh\u00e4lt keine Spalte in der Datenbank.</p> <p>Parameters:</p> Name Type Description Default <code>verbose_name</code> <code>str</code> <p>Ein vom Benutzer lesbarer Name f\u00fcr das Feld.</p> <code>None</code> <code>help_text</code> <code>str</code> <p>Zus\u00e4tzlicher Text, der in decore Front angezeigt wird.</p> <code>None</code> <code>filter_fields</code> <code>list</code> <p>Eine Liste vom Typ String. Es werden nur die angegebenen Felder im Filter angezeigt. Wenn <code>empty</code>, werden alle Felder angezeigt.</p> <code>[]</code> <code>choice_query</code> <code>dict</code> <p>Ein <code>dictonary</code>, das eine Abfrage enth\u00e4lt, die beim laden von Optionen (z.B. in Auswahlfeldern im Frontend) ber\u00fccksichtigt wird. Die Abfrage muss sich auf das Referenzmodell beziehen.</p> <code>{}</code> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre> <pre><code>class Account(Conform_model):\n    user = ForeignKeyField(User, backref='accounts', null=True, verbose_name='User')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre>"},{"location":"de/test/#classes.decore_fields.BooleanField","title":"<code>BooleanField</code>","text":"<p>A field to store boolean values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#classes.decore_fields.CharField","title":"<code>CharField</code>","text":"<p>A field to store char values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool unique: If True, the field must be unique in database table. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#classes.decore_fields.DateField","title":"<code>DateField</code>","text":"<p>A field to store date values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#classes.decore_fields.DateTimeField","title":"<code>DateTimeField</code>","text":"<p>A field to store datetime values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#classes.decore_fields.FloatField","title":"<code>FloatField</code>","text":"<p>A field to store float values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#classes.decore_fields.ForeignKeyField","title":"<code>ForeignKeyField</code>","text":"<p>A field to represent a one-to-many relationship between two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p>"},{"location":"de/test/#classes.decore_fields.IntegerField","title":"<code>IntegerField</code>","text":"<p>A field to store integer values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#classes.decore_fields.ManyToManyField","title":"<code>ManyToManyField</code>","text":"<p>A field to represent a many-to-many relationship between two models. It is a MetaField and does not get a column in the database. However, a through model is created by decore Base, which represents the relationship between the two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p> <p>.. code-block:: python</p> <pre><code>class Account(Conform_model):\n    users = ManyToManyField(User, backref='accounts', null=True, verbose_name='Users')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre>"},{"location":"de/test/#classes.decore_fields.PasswordField","title":"<code>PasswordField</code>","text":"<p>:warning      The keybase is a KeePass file and should be protected by setting the correct access rights (ACL).</p> <p>A field to store passwords in the keybase and to use them again.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    password = PasswordField(null=False, verbose_name='Password')\n</code></pre>"},{"location":"de/test/#classes.decore_fields.TextField","title":"<code>TextField</code>","text":"<p>A field to store text values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"de/test/#mkdocs-ist-besser-als-sphinx","title":"mkdocs ist besser als Sphinx","text":"<ul> <li>Mehr und wesentlich bessere Plugins in vscode f\u00fcr die Markdown bearbeitung.</li> <li>Language Tool f\u00fcr Markdown</li> <li>Markdown All in One</li> <li>Markdown Linting</li> <li>Entwicklungsserver f\u00fcr die anziege der \u00c4nderungen in Echtzeit.</li> <li>Einfachere Konfiguration.</li> <li>Das beste Template f\u00fcr Dokumentation und Blog</li> <li>Easy deploy zu github Pages</li> </ul> <p>Ich brauch langen Text in Lorem Ipsum, um zu sehen, wie die Schriftart aussieht. Hier ist ein Beispiel:</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <p>mdpo</p> <ul> <li>https://aka.ms/vs/17/release/vc_redist.x64.exe VCREDIST required</li> <li>Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/</li> </ul>"},{"location":"de/blog/","title":"Welcome to the blog!","text":""},{"location":"de/blog/posts/powershell-deploy_autodesk_software/","title":"Verteilung von Autodesk-Software mit ODIS-Installer und PowerShell unter Vermeidung des Double-Hop-Problems","text":"<p>Seitdem Autodesk sein Deployment-System auf den ODIS-Installer umgestellt hat, laufen alle Verteilungen, die unbeaufsichtigt \u00fcber den SYSTEM-Account ausgerollt werden, ohne Erfolgscode endlos weiter.</p> <p>Die genaue Fehlermeldung im ODIS-Log lautet:</p> <pre><code>2023-06-15T15:17:04.012 [DDA: 2196, single] [Installer INFO] [ Autodesk::DDA::SdkAgent::Listen::&lt;lambda_8f7c2cafda285d6f3324fbe86a24bae4&gt;::operator () ] [IPC] ChannelWin::Listen: WaitForSingleObject timeout. error_code: 997, pipe_name: \\\\.\\pipe\\adsk_dda_sdk\n</code></pre> <p>Nach einer Weile scheint der Installer-Dienst auch beendet zu werden, sendet aber keinen Exit-Code mehr.</p> <p>Ich habe viele Deployment-Suiten ausprobiert, aber das Resultat ist immer dasselbe, wenn der SYSTEM-Account zum Einsatz kommt.</p> <p>Um das Problem vor\u00fcbergehend zu l\u00f6sen, bis Autodesk das Problem erkennt und behebt, habe ich nun L\u00f6sungsans\u00e4tze entwickelt, die mir hier bei der Arbeit Abhilfe verschaffen.</p> <p>Mein geplanter Ansatz war, die Verteilung \u00fcber PowerShell zu realisieren, aber dabei stie\u00df ich erneut auf eine weitere H\u00fcrde, die die Kerberos-Authentifizierung mit sich bringt: das sogenannte Double-Hop-Problem, da meine Softwarepakete in CIFS-Freigaben lagern.</p> <p>Kerberos l\u00e4sst es nicht zu, dass nach einer Authentifizierung auf einem Remote-PC eine weitere Authentifizierung \u00fcber diesen Endpunkt zu anderen entfernten Zielen durchgef\u00fchrt wird. Es gibt also keinen zweiten Hop. Um das Problem zu umgehen, gibt es wenige, aber komplizierte Wege oder einen, bei dem jetzt alle sagen werden: \"Oh mein Gott, tu das nicht\", aber ich hau es einfach mal raus.</p> <p>Die L\u00f6sung ist, CredSSP nur tempor\u00e4r als Punkt-zu-Punkt-Verbindung zu nutzen und nach dem Deployment wieder zu entsch\u00e4rfen. Es sollte unter keinen Umst\u00e4nden unternehmensweit erlaubt werden.</p> <p>Info</p> <p>CredSSP hat keinen Single-Hop-Zwang. Authentifizierungen k\u00f6nnen in einer CredSSP-Sitzung weiterverwendet werden. Sollte das unternehmensweit und dauerhaft erlaubt werden, kann das zu erheblichen Sicherheitsproblemen f\u00fchren.</p> <p>Hier nun das Skript f\u00fcr alle, die vor dem selben Problem stehen.</p> <p>Das hier beschriebene Skript ist bewusst flach gehalten, um es verst\u00e4ndlich zu machen und den weiteren Ausbau durch Euch so einfach wie m\u00f6glich zu gestalten.</p> <p>Info</p> <p>Bitte beachten Sie, dass in diesem Beispiel CredSSP nur tempor\u00e4r verwendet wird und nach dem Deployment wieder deaktiviert wird. Zudem wird ausschlie\u00dflich der angegebene Remote-Computer delegiert und nicht das gesamte Netzwerk.</p> <p>Nach gr\u00fcndlicher Validierung hat sich dieser Ansatz als sicherer und einfacher Weg erwiesen, um das gew\u00fcnschte Ziel zu erreichen.</p> <p>Warning</p> <p>Dieses Skript muss mit administrativen Rechten ausgef\u00fchrt werden, um die CredSSP-Authentifizierung zu aktivieren und zu deaktivieren.</p> <pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n\n# Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n\ntry {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n\n    # Create a new PSSession with CredSSP authentication\n    $session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n\n    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\nfinally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Erkl\u00e4ren wir nun die einzelnen Schritte des Skripts:</p> <p><pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n</code></pre> Das Skript kann entweder mit Parametern aufgerufen werden, oder Sie tragen Ihre spezifischen Werte direkt ein. Die notwendigen Informationen f\u00fcr den Installer und die Argumente finden Sie nach der Image-Erstellung im entsprechenden Installations-Skript. Ein typischer Name f\u00fcr eine Revit-Installation k\u00f6nnte beispielsweise <code>Install Autodesk Revit 2024.bat</code> sein.</p> <p>Die Parameter f\u00fcr die Silent-Installation und Deinstallation sind ebenfalls dort hinterlegt. Diese Parameter erm\u00f6glichen eine unbeaufsichtigte Installation bzw. Deinstallation der Software, was besonders in gro\u00dfen IT-Umgebungen von Vorteil ist.</p> <p>F\u00fcr weitere Details und eine ausf\u00fchrliche Anleitung zur Bereitstellung von Autodesk-Software, besuchen Sie bitte den folgenden Artikel:</p> <p>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</p> <pre><code># Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n</code></pre> <p>Um eine PowerShell-Sitzung unter Verwendung von CredSSP zu starten, ben\u00f6tigen wir die Anmeldeinformationen eines Benutzers mit den erforderlichen Rechten zur Durchf\u00fchrung von Installationen. In den meisten F\u00e4llen handelt es sich dabei um den Domain-Admin. Ein Dialogfeld wird angezeigt, in dem Sie die Anmeldeinformationen eingeben k\u00f6nnen.</p> <pre><code>try {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n</code></pre> <p>Hier wird CredSSP sowohl auf dem Client als auch auf dem Server aktiviert. Es ist hilfreich, die Begriffe \"Verteiler\" (Client) und \"Empf\u00e4nger\" (Server) zu verwenden, um die Rollen klarer zu definieren. Der Try-Block umfasst alle potenziell fehleranf\u00e4lligen Aktionen und kann nach Belieben angepasst werden. F\u00fcr den Anfang ist diese Struktur einfach und robust.</p> <pre><code># Create a new PSSession with CredSSP authentication\n$session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n</code></pre> <p>Hier wird eine neue PowerShell-Sitzung mit CredSSP-Authentifizierung erstellt.</p> <pre><code>    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\n</code></pre> <p>Hier wird das Skript auf dem Remote-Computer ausgef\u00fchrt. Der Name, der Installer und die Argumente werden als Parameter \u00fcbergeben. An dieser Stelle endet der Try-Block.</p> <pre><code>finally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Im Finally-Block wird die PowerShell-Sitzung geschlossen und CredSSP auf dem Server und Client deaktiviert. Der Finally-Block wird immer ausgef\u00fchrt, unabh\u00e4ngig davon, ob der Try-Block erfolgreich war oder nicht. Bitte beachten Sie, dass das Abfangen von Fehlern auch \u00fcber einen m\u00f6glichen Exception-Block erfolgen kann. Dies \u00fcberlasse ich dem findigen Leser.</p> <p>Dieses Skript dient mir nun selbst als Grundlage f\u00fcr Erweiterungen. Ich werde nun daran arbeiten, ein \u00fcbergeordnetes Skript zu entwickeln, um die Installationen in gro\u00dfen Mengen zu steuern und zu \u00fcberwachen.</p> <p>Quellangaben</p> <ul> <li>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</li> <li>https://learn.microsoft.com/en-us/powershell/scripting/security/remoting/ps-remoting-second-hop?view=powershell-7.4</li> </ul>"},{"location":"de/blog/posts/test/","title":"Hello world","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>"},{"location":"en/","title":"Welcome to MkDocs - English","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"en/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"en/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"en/blog/","title":"Welcome to the blog! - English","text":""},{"location":"en/blog/posts/powershell-deploy_autodesk_software/","title":"Verteilung von Autodesk-Software mit ODIS-Installer und PowerShell unter Vermeidung des Double-Hop-Problems","text":"<p>Seitdem Autodesk sein Deployment-System auf den ODIS-Installer umgestellt hat, laufen alle Verteilungen, die unbeaufsichtigt \u00fcber den SYSTEM-Account ausgerollt werden, ohne Erfolgscode endlos weiter.</p> <p>Die genaue Fehlermeldung im ODIS-Log lautet:</p> <pre><code>2023-06-15T15:17:04.012 [DDA: 2196, single] [Installer INFO] [ Autodesk::DDA::SdkAgent::Listen::&lt;lambda_8f7c2cafda285d6f3324fbe86a24bae4&gt;::operator () ] [IPC] ChannelWin::Listen: WaitForSingleObject timeout. error_code: 997, pipe_name: \\\\.\\pipe\\adsk_dda_sdk\n</code></pre> <p>Nach einer Weile scheint der Installer-Dienst auch beendet zu werden, sendet aber keinen Exit-Code mehr.</p> <p>Ich habe viele Deployment-Suiten ausprobiert, aber das Resultat ist immer dasselbe, wenn der SYSTEM-Account zum Einsatz kommt.</p> <p>Um das Problem vor\u00fcbergehend zu l\u00f6sen, bis Autodesk das Problem erkennt und behebt, habe ich nun L\u00f6sungsans\u00e4tze entwickelt, die mir hier bei der Arbeit Abhilfe verschaffen.</p> <p>Mein geplanter Ansatz war, die Verteilung \u00fcber PowerShell zu realisieren, aber dabei stie\u00df ich erneut auf eine weitere H\u00fcrde, die die Kerberos-Authentifizierung mit sich bringt: das sogenannte Double-Hop-Problem, da meine Softwarepakete in CIFS-Freigaben lagern.</p> <p>Kerberos l\u00e4sst es nicht zu, dass nach einer Authentifizierung auf einem Remote-PC eine weitere Authentifizierung \u00fcber diesen Endpunkt zu anderen entfernten Zielen durchgef\u00fchrt wird. Es gibt also keinen zweiten Hop. Um das Problem zu umgehen, gibt es wenige, aber komplizierte Wege oder einen, bei dem jetzt alle sagen werden: \"Oh mein Gott, tu das nicht\", aber ich hau es einfach mal raus.</p> <p>Die L\u00f6sung ist, CredSSP nur tempor\u00e4r als Punkt-zu-Punkt-Verbindung zu nutzen und nach dem Deployment wieder zu entsch\u00e4rfen. Es sollte unter keinen Umst\u00e4nden unternehmensweit erlaubt werden.</p> <p>Info</p> <p>CredSSP hat keinen Single-Hop-Zwang. Authentifizierungen k\u00f6nnen in einer CredSSP-Sitzung weiterverwendet werden. Sollte das unternehmensweit und dauerhaft erlaubt werden, kann das zu erheblichen Sicherheitsproblemen f\u00fchren.</p> <p>Hier nun das Skript f\u00fcr alle, die vor dem selben Problem stehen.</p> <p>Das hier beschriebene Skript ist bewusst flach gehalten, um es verst\u00e4ndlich zu machen und den weiteren Ausbau durch Euch so einfach wie m\u00f6glich zu gestalten.</p> <p>Info</p> <p>Bitte beachten Sie, dass in diesem Beispiel CredSSP nur tempor\u00e4r verwendet wird und nach dem Deployment wieder deaktiviert wird. Zudem wird ausschlie\u00dflich der angegebene Remote-Computer delegiert und nicht das gesamte Netzwerk.</p> <p>Nach gr\u00fcndlicher Validierung hat sich dieser Ansatz als sicherer und einfacher Weg erwiesen, um das gew\u00fcnschte Ziel zu erreichen.</p> <p>Warning</p> <p>Dieses Skript muss mit administrativen Rechten ausgef\u00fchrt werden, um die CredSSP-Authentifizierung zu aktivieren und zu deaktivieren.</p> <pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n\n# Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n\ntry {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n\n    # Create a new PSSession with CredSSP authentication\n    $session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n\n    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\nfinally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Erkl\u00e4ren wir nun die einzelnen Schritte des Skripts:</p> <p><pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n</code></pre> Das Skript kann entweder mit Parametern aufgerufen werden, oder Sie tragen Ihre spezifischen Werte direkt ein. Die notwendigen Informationen f\u00fcr den Installer und die Argumente finden Sie nach der Image-Erstellung im entsprechenden Installations-Skript. Ein typischer Name f\u00fcr eine Revit-Installation k\u00f6nnte beispielsweise <code>Install Autodesk Revit 2024.bat</code> sein.</p> <p>Die Parameter f\u00fcr die Silent-Installation und Deinstallation sind ebenfalls dort hinterlegt. Diese Parameter erm\u00f6glichen eine unbeaufsichtigte Installation bzw. Deinstallation der Software, was besonders in gro\u00dfen IT-Umgebungen von Vorteil ist.</p> <p>F\u00fcr weitere Details und eine ausf\u00fchrliche Anleitung zur Bereitstellung von Autodesk-Software, besuchen Sie bitte den folgenden Artikel:</p> <p>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</p> <pre><code># Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n</code></pre> <p>Um eine PowerShell-Sitzung unter Verwendung von CredSSP zu starten, ben\u00f6tigen wir die Anmeldeinformationen eines Benutzers mit den erforderlichen Rechten zur Durchf\u00fchrung von Installationen. In den meisten F\u00e4llen handelt es sich dabei um den Domain-Admin. Ein Dialogfeld wird angezeigt, in dem Sie die Anmeldeinformationen eingeben k\u00f6nnen.</p> <pre><code>try {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n</code></pre> <p>Hier wird CredSSP sowohl auf dem Client als auch auf dem Server aktiviert. Es ist hilfreich, die Begriffe \"Verteiler\" (Client) und \"Empf\u00e4nger\" (Server) zu verwenden, um die Rollen klarer zu definieren. Der Try-Block umfasst alle potenziell fehleranf\u00e4lligen Aktionen und kann nach Belieben angepasst werden. F\u00fcr den Anfang ist diese Struktur einfach und robust.</p> <pre><code># Create a new PSSession with CredSSP authentication\n$session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n</code></pre> <p>Hier wird eine neue PowerShell-Sitzung mit CredSSP-Authentifizierung erstellt.</p> <pre><code>    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\n</code></pre> <p>Hier wird das Skript auf dem Remote-Computer ausgef\u00fchrt. Der Name, der Installer und die Argumente werden als Parameter \u00fcbergeben. An dieser Stelle endet der Try-Block.</p> <pre><code>finally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Im Finally-Block wird die PowerShell-Sitzung geschlossen und CredSSP auf dem Server und Client deaktiviert. Der Finally-Block wird immer ausgef\u00fchrt, unabh\u00e4ngig davon, ob der Try-Block erfolgreich war oder nicht. Bitte beachten Sie, dass das Abfangen von Fehlern auch \u00fcber einen m\u00f6glichen Exception-Block erfolgen kann. Dies \u00fcberlasse ich dem findigen Leser.</p> <p>Dieses Skript dient mir nun selbst als Grundlage f\u00fcr Erweiterungen. Ich werde nun daran arbeiten, ein \u00fcbergeordnetes Skript zu entwickeln, um die Installationen in gro\u00dfen Mengen zu steuern und zu \u00fcberwachen.</p> <p>Quellangaben</p> <ul> <li>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</li> <li>https://learn.microsoft.com/en-us/powershell/scripting/security/remoting/ps-remoting-second-hop?view=powershell-7.4</li> </ul>"}]}