{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"decore Base | Ui fastly","text":"<p>The documentation for decore Base is currently being created here.</p>"},{"location":"blog/","title":"Welcome to my blog","text":"<p>Here I write about my experiences and insights that I have gained in the course of my work, but also in general.</p> <p>By and large, this is a collection of my technical documentation that can be useful for both beginners and advanced users. It is my goal to help others overcome their own technical challenges and expand their skills by sharing my knowledge and experience. Whether it's programming, system administration or other technical topics, this is where I'll capture it all.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/","title":"Installation von Caldera Dock und Caldera Rip auf Ubuntu Desktop 22.04","text":"<p>This article describes the installation of Caldera Dock and Caldera Rip on an Ubuntu Desktop 22.04 system in detail. The instructions cover the preparation of the system, the installation of Ubuntu, as well as the subsequent installation and configuration of Caldera Dock and Caldera Rip. In addition, the setup of XRDP for remote connection is explained. This step-by-step guide is aimed at users who want to use either a virtual machine or a physical computer.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#vorbereitung","title":"Vorbereitung","text":"<p>Before you can start installing Caldera Dock and Caldera Rip on Ubuntu 22.04, there are some basic steps that should be performed.</p> <p>Either a virtual machine (VM) or a physical computer (bare metal) can be used for the installation. Both options are suitable and offer the necessary requirements for the installation. In this example, a Proxmox VM is used, but other virtualization platforms can also be used.</p> <p>It should be ensured that the system has a working internet connection to download updates during installation and to ensure that all required packages and dependencies are available. The system requirements of Caldera should be observed, these can be viewed on the official Caldera website.</p> <p>It is recommended to create a backup of the system before installation to ensure that all data is backed up in case of a problem. In addition, the Caldera documentation should be read to familiarize yourself with the specific requirements and steps for the installation.</p> <p>After the preparations have been completed, the installation of Caldera Dock and Caldera Rip on Ubuntu 22.04 can be started.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-ubuntu-desktop-2204","title":"Installation Ubuntu Desktop 22.04","text":"<p>After mounting the current <code>Ubuntu Desktop 22.04</code> ISO either via USB stick or as boot medium in the VM, the installation routine is started.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installationsschritte","title":"Installationsschritte","text":"<ul> <li>The welcome screen appears, offering the options to try out or install Ubuntu. First select your preferred language and then select the Install Ubuntu option and press Enter.</li> <li>Select the keyboard layout and click Next.</li> <li>The Minimal installation, While Ubuntu is installing Download updates and Install third-party software for graphics and Wi-Fi hardware and additional media formats and click Next.</li> <li>Next, select the option Erase hard disk and install Ubuntu and click on Install now.</li> <li>Select location and click Next.</li> <li>Fill in all fields under Who are you? as follows:<ul> <li>Your name: <code>caldera</code></li> <li>Name of your computer: Select the actual DNS name as the PC is to be addressed later. e.g. <code>calderarip</code></li> <li>Please select a username: <code>caldera</code></li> <li>Choose a password: <code>caldera</code> (According to manufacturer documentation)</li> <li>Request password to log in (recommended if xrdp is used for the connection to the Ubuntu desktop)</li> </ul> </li> <li>Once all fields have been filled in, click Next.</li> </ul> <p>Wait until the installation is complete and restart the system.</p> <p>After the restart, <code>Ubuntu Desktop 22.04</code> should be successfully installed and it should be possible to log in with the previously created user.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-of-caldera-dock","title":"Installation of Caldera Dock","text":"<p>After the installation of <code>Ubuntu Desktop 22.04</code> you can continue with the installation of Caldera Dock.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#download-the-installation-file","title":"Download the installation file","text":"<ul> <li>Log in to <code>Caldera WorkSpace</code> and go to the main dashboard page.</li> <li>Click on the Install button to find the installation file. Download Caldera Dock (Ubuntu).</li> </ul>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#install-the-downloaded-deb-file","title":"Install the downloaded .deb file","text":"<ul> <li>Change to the folder in which the installation file was saved.</li> <li>Find the installation file, right-click on it and select the Open with another application option.</li> <li>The Ubuntu installation wizard is displayed. Select software installation.</li> <li>Wait a few seconds until the installation files are loaded and then click on Install.</li> <li>Authentication is required before continuing the installation. Enter the password that was set during the installation of <code>Ubuntu Desktop 22.04</code>.</li> </ul> <p>The installation will now be carried out.</p> <p>As soon as the installation is complete, <code>Caldera Dock</code> can be started via the main menu or the search bar.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installing-the-setup-tools","title":"Installing the setup tools","text":"<ul> <li>On the <code>Caldera Dock</code> start page, click on Install in the Setup tools section.</li> <li>Then click on Configure and confirm with the password.</li> </ul> <p>After some time, the installation will be complete and the setup tools will be ready for use.</p> <p>A restart is recommended to ensure that all changes take effect.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-of-caldera-rip","title":"Installation of Caldera Rip","text":"<p>Now the instruction steps to install <code>Caldera Rip</code> on <code>Ubuntu Desktop 22.04</code>.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-of-caldera-rip_1","title":"Installation of Caldera Rip","text":"<ul> <li>Click on Applications in the <code>Caldera Dock</code>.</li> <li>Search for <code>Caldera Rip</code> and click on Install.</li> <li>Enlarge the swap file when the message appears.</li> <li>Authentication is required after the download and before installation. Enter the password that was set during the installation of <code>Ubuntu Desktop 22.04</code>.</li> </ul> <p>A further restart should then be carried out.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#setting-up-xrdp","title":"Setting up XRDP","text":"<p>To establish a connection to <code>Ubuntu Desktop 22.04</code> via <code>XRDP</code>, a few additional steps are required.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-of-xrdp","title":"Installation of XRDP","text":"<ul> <li>Open a terminal and execute the following command to install <code>XRDP</code>:</li> </ul> <pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install xrdp -y\n</code></pre> <ul> <li>After installing <code>XRDP</code>, execute the following commands to activate and start the <code>XRDP</code>:</li> </ul> <pre><code>sudo systemctl enable xrdp\nsudo systemctl start xrdp\n</code></pre> <ul> <li>Add the <code>xrdp</code> user to the <code>ssl-cert</code> group to enable the connection:</li> </ul> <pre><code>sudo usermod -a -G ssl-cert xrdp\n</code></pre> <ul> <li>Only allow RDP through the local firewall:</li> </ul> <pre><code>sudo ufw allow 3389\n</code></pre> <ul> <li>To use the Ubuntu session instead of the standard GNOME session, expand the .xsessionrc file in your home directory with the following content:</li> </ul> <p><pre><code>nano ~/.xsessionrc\n</code></pre> - Add the following lines:</p> <pre><code>export GNOME_SHELL_SESSION_MODE=ubuntu\nexport XDG_CURRENT_DESKTOP=ubuntu:GNOME\nexport XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg\n</code></pre> <ul> <li>Finally, restart XRDP to apply the changes:</li> </ul> <pre><code>sudo systemctl restart xrdp\n</code></pre> <p>After the installation is complete, the connection to your <code>Ubuntu Desktop 22.04</code> can be established via <code>XRDP</code>.</p>"},{"location":"blog/2024/powershell-deploy_autodesk_software/","title":"Distribution of Autodesk software with ODIS installer and PowerShell avoiding the double-hop problem","text":"<p>Since Autodesk has switched its deployment system to the ODIS installer, all deployments that are rolled out unattended via the SYSTEM account continue to run endlessly without success code.</p> <p>The exact error message in the ODIS log is:</p> <pre><code>2023-06-15T15:17:04.012 [DDA: 2196, single] [Installer INFO] [ Autodesk::DDA::SdkAgent::Listen::&lt;lambda_8f7c2cafda285d6f3324fbe86a24bae4&gt;::operator () ] [IPC] ChannelWin::Listen: WaitForSingleObject timeout. error_code: 997, pipe_name: \\\\.\\pipe\\adsk_dda_sdk\n</code></pre> <p>After a while, the installer service also appears to be terminated, but no longer sends an exit code.</p> <p>I have tried many deployment suites, but the result is always the same when the SYSTEM account is used.</p> <p>To solve the problem temporarily until Autodesk recognizes and fixes the problem, I have now developed solutions that help me here at work.</p> <p>My planned approach was to implement the distribution via PowerShell, but in doing so I again encountered another hurdle that Kerberos authentication brings with it: the so-called double-hop problem, since my software packages are stored in CIFS shares.</p> <p>Kerberos does not allow further authentication to be carried out via this endpoint to other remote destinations after authentication on a remote PC. So there is no second hop. To get around the problem, there are few but complicated ways or one that everyone will now say, \"Oh my God, don't do that,\" but I'll just throw it out there.</p> <p>The solution is to use CredSSP only temporarily as a point-to-point connection and to deactivate it again after deployment. Under no circumstances should it be allowed company-wide.</p> <p>Info</p> <p>CredSSP has no single-hop constraint. Authentications can continue to be used in a CredSSP session. If this is allowed company-wide and permanently, it can lead to considerable security problems.</p> <p>Here is the script for all those who are facing the same problem.</p> <p>The script described here is deliberately kept flat to make it easy to understand and to make further expansion by you as simple as possible.</p> <p>Info</p> <p>Please note that CredSSP is only used temporarily in this example and is deactivated again after deployment. In addition, only the specified remote computer is delegated and not the entire network.</p> <p>After thorough validation, this approach has proven to be a safe and simple way to achieve the desired goal.</p> <p>Warning</p> <p>This script must be executed with administrative rights in order to activate and deactivate CredSSP authentication.</p> <pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '-i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n\n# Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n\ntry {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n\n    # Create a new PSSession with CredSSP authentication\n    $session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n\n    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\nfinally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Let us now explain the individual steps of the script:</p> <p><pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n</code></pre> The script can either be called with parameters or you can enter your specific values directly. The necessary information for the installer and the arguments can be found in the corresponding installation script after the image has been created. A typical name for a Revit installation could be <code>Install Autodesk Revit 2024.bat</code>, for example.</p> <p>The parameters for silent installation and uninstallation are also stored there. These parameters enable unattended installation and uninstallation of the software, which is particularly advantageous in large IT environments.</p> <p>For more details and a detailed guide to deploying Autodesk software, please visit the following article:</p> <p>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</p> <pre><code># Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n</code></pre> <p>To start a PowerShell session using CredSSP, we need the credentials of a user with the required rights to perform installations. In most cases, this is the domain admin. A dialog box is displayed in which you can enter the credentials.</p> <pre><code>try {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n</code></pre> <p>Here CredSSP is activated on both the client and the server. It is helpful to use the terms \"distributor\" (client) and \"recipient\" (server) to define the roles more clearly. The try block includes all potentially error-prone actions and can be customized as desired. For starters, this structure is simple and robust.</p> <pre><code># Create a new PSSession with CredSSP authentication\n$session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n</code></pre> <p>A new PowerShell session with CredSSP authentication is created here.</p> <pre><code>    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\n</code></pre> <p>Here the script is executed on the remote computer. The name, the installer and the arguments are passed as parameters. The try block ends at this point.</p> <pre><code>finally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>The Finally block closes the PowerShell session and deactivates CredSSP on the server and client. The Finally block is always executed, regardless of whether the Try block was successful or not. Please note that errors can also be intercepted via a possible exception block. I leave this to the resourceful reader.</p> <p>This script now serves as the basis for my own extensions. I will now work on developing a higher-level script to control and monitor the installations in large quantities.</p> <p>Source information</p> <ul> <li>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</li> <li>https://learn.microsoft.com/en-us/powershell/scripting/security/remoting/ps-remoting-second-hop?view=powershell-7.4</li> </ul>"},{"location":"doc/decore/","title":"Base class","text":""},{"location":"doc/decore/#decore","title":"<code>decore</code>","text":""},{"location":"doc/decore/#decore.Decore","title":"<code>Decore</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"doc/decore/#decore.Decore.app","title":"<code>app(title, desc=None, role=0, dev=True)</code>","text":"<p>A function for opening a GUI dashboard application. It is used as a \"Decorator\".</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the app.</p> required <code>desc</code> <code>str</code> <p>The description of the app.</p> <code>None</code> <code>role</code> <code>int</code> <p>The role specification is used to deliver only authorized elements to the framework. Role 0 allows the guest account to access the app immediately. Anything above 0 requires a login.</p> <code>0</code> <code>dev</code> <code>bool</code> <p>The development mode activates the CORS headers, prepares the application for the first run, activates further dev features and enables the app to be tested on a local server.</p> <code>True</code> <pre><code>    @decore.app(title='decore Sample', role=0)\n    def main():\n        pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.base","title":"<code>base(icon=None, title=None, desc=None, hide=False, role=0, model=Decore_model, private=False, stretch=False, navigation='main-top')</code>","text":"<p>Eine Funktion zum registrieren einer Basis in der GUI-Dashboard-Anwendung. Sie wird als \"Decorator\" verwendet.</p> <p>Die Basis ist das Tr\u00e4gerelement f\u00fcr die Ansicht und die Vorlage f\u00fcr die Datenquelle im Frontend.</p> <p>:param str icon: Das Symbol der Basis. :param str title: Der Titel der Basis. :param str desc: Die Beschreibung der Basis. :param Model model: Das Datenmodell der Basis.</p> <p>.. code-block:: python</p> <pre><code>@decore.base(icon='mdi-account', title='Person', desc='A basis for managing personal data', model=Person)\nclass Person_base:\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.view","title":"<code>view(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='default', fields=[], filters=[], query={}, pag_type='client', pag_recs=16)</code>","text":"<p>Eine Funktion zur Registrierung einer Ansicht. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Ansicht ist ein Container f\u00fcr die Anzeige von Daten.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Ansicht in einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Ansicht. :param str title: Der Titel der Ansicht. :param str desc: Die Beschreibung der Ansicht. :param str type: Gibt an wie die Datens\u00e4tze angezeigt werden. Der Wert <code>table</code> stellt die Datens\u00e4tze in einer Tabelle dar. :type type: Literal['default'] :param list fields: Die Felder, die in der Ansicht angezeigt werden. :param list filters: Die Filter, die in der Ansicht angezeigt werden. :param dict query: Die Abfrage, die in der Ansicht angezeigt wird. :param str pag_type: W\u00e4hlt die Methode wie die Datens\u00e4tze der View geladen werden. Der Wert <code>client</code> l\u00e4dt alle Datens\u00e4tze auf einmal und \u00fcberl\u00e4sst den Seitenaufbau dem Frontend. :type pag_type: Literal['client'] :param int pag_recs: Gibt an wieviele Datens\u00e4tze auf einer Seite der Ansicht angezeigt werden sollen. <code>16</code> ist die Standardeinstellung.</p> <p>.. code-block:: python</p> <pre><code>@decore.view(icon='mdi-account', title='Person', desc='A view for managing personal data', type='table', fields=[Person.id, Person.name, Person.age], filters=[Person.name, Person.age], query={'name__eq': 'Kemo'}, pag_type='client', pag_recs=16)\ndef person_view():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.dialog","title":"<code>dialog(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='standard', activator='empty')</code>","text":"<p>Eine Funktion zur Registrierung eines Dialogs. Sie wird als \"Decorator\" verwendet.</p> <p>Der Dialog ist das Tr\u00e4gerelement f\u00fcr Widgets </p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn der Dialog in einer Ansicht einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Dialogs. :param str title: Der Titel des Dialogs. :param str desc: Die Beschreibung des Dialogs. :param str type: Gibt an wie der Dialog die Widgets darstellen wird. Der Wert <code>standard</code> stellt die untergeordneten Widgets und Sub-Widgets untereinander dar. :type type: Literal['standard'] :param str display: Der Anzeigetyp des Dialogs. Standardwert ist <code>draw-half</code>. :type display: Literal['modal', 'draw-half', 'draw-full'] :param str activator: Der Aktivatortyp des Dialogs. \u00dcber den Wert <code>none</code> wird der Dialog sofort beim OnLoad Ereignis der View angezeigt. Der Wert <code>default</code> stellt den Dialog im Top-Menu der View dar. Der Wert <code>context</code> stellt den Dialog im Kontextmen\u00fc eines Items der View dar. Der Wert <code>click</code> zeigt den Dialog dann an wenn man einen Datensatz anklickt. :type activator: Literal['none', 'default', 'context', 'click']</p> <p>.. code-block:: python</p> <pre><code>@decore.dialog(icon='mdi-account', title='Person', desc='A dialog for managing personal data', type='standard', display='drawer', activator='default-menu')\ndef person_dialog():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.widget","title":"<code>widget(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='default', layout='ceta', fields=[])</code>","text":"<p>Eine Funktion zur Registrierung eines Widgets. Sie wird als \"Decorator\" verwendet.</p> <p>Ein Widget dient zur Darstellung und Interaktion mit dem Datensatz. Es erh\u00e4lt die Daten, die der Dialog-Aktivator vorgibt. Der Wert <code>none</code> \u00fcbergibt den letzten Datensatz der Datenbanktabelle. Der Wert <code>default</code> \u00fcbergibt einen nur mit Default-Werten gef\u00fcllten Datensatz. Beim Wert <code>context</code> \u00fcbergibt es den Datensatz, der im Kontextmen\u00fc der Ansicht ausgew\u00e4hlt wurde. Und <code>click</code> \u00fcbergibt den Datensatz, der angeklickt wurde. </p> <p>Widgets, welche aus einer fremden Basis einem Dialog zugeordnet werden, erg\u00e4nzen die relationalen Felder eines Default-Items der fremden Datenquelle mit den Daten des aktivierten Items. (Der Satz ist Schei\u00dfe zu verstehen, aber er trifft genau das, was es tut). In der Sample Anwendung verwende ich das beim Zuweisen von \"Contracts\" zu einer \"Person\". </p> <p>Es gibt aber auch Widgets, die mehrere Datens\u00e4tze darstellen k\u00f6nnen, wie im Beispiel davor werden hier auch die Relationen verwendet, um nur Daten abzubilden, die etwas mit dem gew\u00e4hlten Item zu tun haben.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn das Widget in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Widgets. :param str title: Der Titel des Widgets. :param str desc: Die Beschreibung des Widgets. :param str type: Gibt an wie das Widget die Daten darstellen wird. Standardwert ist <code>default</code>. :type type: Literal['default', 'info', 'form', 'table'] :param list fields: Die Felder, die in dem Widget angezeigt werden.</p> <p>.. code-block:: python</p> <pre><code>@decore.widget(icon='mdi-account', title='Person', desc='A widget for managing personal data', type='form', layout='cera', fields=[Person.name, Person.age])\ndef person_widget():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.template","title":"<code>template(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0)</code>","text":"<p>Eine Funktion zur Registrierung einer Vorlage. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Vorlage ist HTML-Code der im Layout der View oder des Widgets gerendert wird.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Vorlage in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Vorlage. :param str title: Der Titel der Vorlage. :param str desc: Die Beschreibung der Vorlage. :param str name: Der Name der Vorlage.</p> <p>.. code-block:: python</p> <pre><code>@decore.template(icon='mdi-account', title='Person', desc='A html template', name='person_template')\ndef person_template():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.hook","title":"<code>hook(parent_id=None, icon=None, title=None, desc=None, role=0)</code>","text":"<p>Eine Funktion zur Registrierung eines \"Hakens\". Sie wird als \"Decorator\" verwendet. </p> <p>Ein Haken ist eine Funktion zum abfangen des Load-Ereignisses der \u00fcbergeordneten Komponente. Er kann dazu genutzt werden um vor dem Laden einer Komponente Bedingungen im Backend zu pr\u00fcfen und gegebenenfalls den Pool zu manipulieren oder die Route zu \u00e4ndern. </p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn der Haken in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Hakens. :param str title: Der Titel des Hakens. :param str desc: Die Beschreibung des Hakens. :param str name: Der Name des Hakens.</p> <p>.. code-block:: python</p> <pre><code>@decore.hook(icon='mdi-account', title='Person', desc='A hook to catch events')\ndef sample_hook(**kwargs):\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.action","title":"<code>action(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='standard', activator='none', errors=True)</code>","text":"<p>Eine Funktion zur Registrierung einer Aktion. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Aktion ist die tats\u00e4chliche Interaktion zwischen dem Benutzer und dem Backend.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Aktion in einem Widget einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Aktion. :param str title: Der Titel der Aktion. :param str desc: Die Beschreibung der Aktion. :param str type: Gibt an was die Aktion kann. Standardwert ist <code>standard</code>. :type type: Literal['standard', 'submit'] :param str activator: Gib an, wie die Aktion ausgel\u00f6st wird. :type activator: Literal['default', 'context', 'click'] :param bool errors: Gibt an, ob die Aktion Validierungsfehler zur\u00fcckgeben kann. Standardwert ist <code>True</code>. (Im Augenblick wirkt sich das nur auf den Typen <code>submit</code> aus.)</p> <p>.. code-block:: python</p> <pre><code>@decore.action(icon='mdi-account', title='Person', desc='A action for managing personal data', type='submit')\ndef sample_action(**kwargs):\n    pass\n</code></pre> <p>Die Aktionen durchlaufen ein Modul, welches die erhaltenen Daten aufbereitet und als Keyword-Parameter an die dekorierte Funktion \u00fcbergibt. Es ist alles in den <code>kwargs</code> zu finden und man macht sich diese einfach verf\u00fcgbar. Der Parameter <code>item</code> ist ein Beispiel daf\u00fcr und repr\u00e4sentiert den vom Frontend zur\u00fcckgegebenen Datensatz. Um herauszufinden, was alles noch in den <code>kwargs</code> steckt, bitte den Debugger benutzen.</p>"},{"location":"doc/decore/#decore.Decore.function","title":"<code>function(type='shot')</code>","text":"<p>Eine Funktion zur Registrierung einer Funktion in der \u00fcbergeordneten Base. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Funktion wird direkt nach der Zusammenstellung des Metadaten-Pool ausgef\u00fchrt. Mit Funktionen kann man die Logik erweitern, Dinge vorbereiten oder Hintergrundaufgaben erledigen. Sie agieren als Instanzmethoden der Basis und erhalten damit den objektorientierten Ansatz.</p> <p>:param str type: Gibt an wie eine Funktion ausgef\u00fchrt wird. Mit dem Wert <code>shot</code> wird sie nur einmal ausgef\u00fchrt. Der Wert <code>work</code> wird in einem Thread ausgef\u00fchrt und kann somit Schleifen abarbeiten die niemals enden bis der Main-Thread endet. :type type: Literal['shot', 'work']</p> <p>.. code-block:: python</p> <pre><code>@decore.function(type='shot')\ndef sample_function(self):\n    pass\n</code></pre>"},{"location":"doc/fields/","title":"Fields and types","text":""},{"location":"doc/fields/#classes.decore_fields","title":"<code>classes.decore_fields</code>","text":""},{"location":"doc/fields/#classes.decore_fields.BackrefMetaField","title":"<code>BackrefMetaField</code>","text":"<p>               Bases: <code>MetaField</code></p> <p>The BackrefMetaField is required so that decore Front can display relationships between models. It can be assigned to the filter or a form, for example. It is a MetaField and is not assigned a column in the database.</p> <p>Parameters:</p> Name Type Description Default <code>verbose_name</code> <code>str</code> <p>A user-readable name for the field.</p> <code>None</code> <code>help_text</code> <code>str</code> <p>Zus\u00e4tzlicher Text, der in decore Front angezeigt wird.</p> <code>None</code> <code>filter_fields</code> <code>list</code> <p>Eine Liste vom Typ String. Es werden nur die angegebenen Felder im Filter angezeigt. Wenn <code>empty</code>, werden alle Felder angezeigt.</p> <code>[]</code> <code>choice_query</code> <code>dict</code> <p>Ein <code>dictonary</code>, das eine Abfrage enth\u00e4lt, die beim laden von Optionen (z.B. in Auswahlfeldern im Frontend) ber\u00fccksichtigt wird. Die Abfrage muss sich auf das Referenzmodell beziehen.</p> <code>{}</code> <p>Warning</p> <p>The name of the <code>BackRefMetaField</code> must match the value of the specified <code>backref</code> parameter in the ForeignKey or ManyToMany field in the reference model. In the following example, the name of the <code>BackRefMetaField</code> is equal to <code>accounts</code> and so is the value of the ForeignKey <code>backref</code> parameter.</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre> <pre><code>class Account(Conform_model):\n    user = ForeignKeyField(User, backref='accounts', null=True, verbose_name='User')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.BooleanField","title":"<code>BooleanField</code>","text":"<p>               Bases: <code>BooleanField</code></p> <p>A field to store boolean values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.CharField","title":"<code>CharField</code>","text":"<p>               Bases: <code>CharField</code></p> <p>A field to store char values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool unique: If True, the field must be unique in database table. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.DateField","title":"<code>DateField</code>","text":"<p>               Bases: <code>DateField</code></p> <p>A field to store date values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.DateTimeField","title":"<code>DateTimeField</code>","text":"<p>               Bases: <code>DateTimeField</code></p> <p>A field to store datetime values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.FloatField","title":"<code>FloatField</code>","text":"<p>               Bases: <code>FloatField</code></p> <p>A field to store float values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.PasswordField","title":"<code>PasswordField</code>","text":"<p>               Bases: <code>Field</code></p> <p>:warning      The keybase is a KeePass file and should be protected by setting the correct access rights (ACL).</p> <p>A field to store passwords in the keybase and to use them again.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    password = PasswordField(null=False, verbose_name='Password')\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.ForeignKeyField","title":"<code>ForeignKeyField</code>","text":"<p>               Bases: <code>ForeignKeyField</code></p> <p>A field to represent a one-to-many relationship between two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p>"},{"location":"doc/fields/#classes.decore_fields.IntegerField","title":"<code>IntegerField</code>","text":"<p>               Bases: <code>IntegerField</code></p> <p>A field to store integer values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.ManyToManyField","title":"<code>ManyToManyField</code>","text":"<p>               Bases: <code>ManyToManyField</code></p> <p>A field to represent a many-to-many relationship between two models. It is a MetaField and does not get a column in the database. However, a through model is created by decore Base, which represents the relationship between the two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p> <p>.. code-block:: python</p> <pre><code>class Account(Conform_model):\n    users = ManyToManyField(User, backref='accounts', null=True, verbose_name='Users')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.TextField","title":"<code>TextField</code>","text":"<p>               Bases: <code>TextField</code></p> <p>A field to store text values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"sub/mkdocs_material_langly/","title":"MkDocs Material Langly Plugin","text":"<p>The Langly plugin for MkDocs is a plugin that provides language support and translations for websites created with MkDocs using the Material theme. It enables easy management of multilingual content and automatic translation of texts to reach a wider audience. It deliberately does not comply with any of the current translation standards, but takes a completely unique but open approach.</p> <p>This plugin was created to use the great Material theme and offers functionalities to e.g. internationalize the blog area.</p> <p>No other themes are supported at this stage of development. The only translation engine currently available is Deepl and a DeepL api key is required to use the plugin.</p>"},{"location":"sub/mkdocs_material_langly/#directly-supported-plugins-for-mkdocs","title":"Directly supported plugins for mkdocs","text":"<p>This list includes plugins that were used directly in the development of Langly.  But it is not impossible that other plugins will also work.</p> <ul> <li>mkdocs-material</li> <li>mkdocs-strings</li> </ul> <p>These great plugins definitely need full support and recognition.</p> <p>Note</p> <p>The plugin is still under development and it is recommended to read the documentation to understand the functionalities and limitations. I also ask you to report all requirements and suggested changes in the GitHub issues.</p>"},{"location":"sub/mkdocs_material_langly/#lets-get-started","title":"Let's get started","text":"<p>To get started, a few preliminary steps are required to use the plugin.</p> <ul> <li> mkdocs with installed material theme</li> <li> A Deepl account is required</li> </ul>"},{"location":"sub/mkdocs_material_langly/#installation-of-the-plugin","title":"Installation of the plugin","text":"<p>To use the plugin, you must first install it. To do this, execute the following command:</p> <pre><code>pip install mkdocs-material-langly\n</code></pre>"},{"location":"sub/mkdocs_material_langly/#provide-api-key","title":"Provide Api key","text":"<p>Danger</p> <p>Please read this section carefully and be sure to exclude the Api key in the .gitignore and also protect it in every possible way from being uploaded to the Internet.</p> <p>To use the plugin, you need a Deepl API key. You can obtain this free of charge from the Deepl website.</p> <p>After you have created the api key, create a file called <code>auth_key.json</code> in the root directory of your project and add the following content:</p> <pre><code>  {\n      \"deepl\": \"DEEPL-API-KEY\"\n  }\n</code></pre> <p>Replace <code>DEEPL-API-KEY</code> with your own api key.</p> <p>Open the .gitignore file and add the line <code>auth_key.json</code> to prevent the file from being uploaded by mistake.</p>"},{"location":"sub/mkdocs_material_langly/#configuration-of-the-plugin","title":"Configuration of the plugin","text":"<p>After installation, you can activate the plugin in your <code>mkdocs.yml</code>.</p> <p>Info</p> <p>No language-related settings need to be made in the Material theme. This means that the <code>theme&gt;language</code> and <code>extra&gt;alternate</code> options are set by the plugin.</p> <pre><code>site_url: https://&lt;example&gt;.com\n..\n..\n..\nplugins:\n  - search\n  - langly:\n      lang_switch: true\n      source:\n          name: Deutsch\n          lang: de\n      targets:\n        - name: English\n          lang: en-us\n</code></pre> <p>In this configuration, German is set as the source language and English as the target language. You can add as many target languages as you like. However, this will affect the <code>serve</code> performance all the more. The <code>site_url</code> option should correspond to the publication address of your website so that the <code>sitemap</code> and <code>canonicals</code> function correctly.</p> <p>Warning</p> <p>It is important to use the Deepl language codes for <code>source</code> and <code>target</code>. These can be found on the following website: Deepl Language Codes</p> <p>Once you have made the configuration, you can use the translation functions in your Markdown files.</p>"},{"location":"sub/mkdocs_material_langly/#using-the-plugin","title":"Using the plugin","text":"<p>The plugin analyzes Markdown texts and evaluates masked text passages that are enclosed with <code>[[</code> and <code>]]</code>. These <code>delimiter</code> are removed when the page is rendered and the source and target language are displayed correctly on your page. </p> <p>Proceed as follows to mask texts</p> <p><code>[[</code>Your text<code>]]</code></p> <p>The text within the masking is then automatically translated by Langly translate.</p>"},{"location":"sub/mkdocs_material_langly/#a-few-simple-examples","title":"A few simple examples","text":""},{"location":"sub/mkdocs_material_langly/#set","title":"Set","text":"<p><code>[[</code>This text represents your source language<code>]]</code></p>"},{"location":"sub/mkdocs_material_langly/#paragraph","title":"Paragraph","text":"<p><code>[[</code>This paragraph contains several sentences in your source language. It is the recommended way of masking text passages and provides Deepl with more context to deliver a better translation.]</p>"},{"location":"sub/mkdocs_material_langly/#enumeration-with-colon","title":"Enumeration with colon","text":"<ul> <li><code>[[</code>enumeration<code>]]</code>:<code>[[</code>value after the colon<code>]]</code></li> </ul>"},{"location":"sub/mkdocs_material_langly/#record-in-which-the-delimiter-occurs","title":"Record in which the delimiter occurs","text":"<p>Enclose the opening and closing delimiter with `</p>"},{"location":"sub/mkdocs_material_langly/#changelog-und-features","title":"Changelog und Features","text":""},{"location":"sub/mkdocs_material_langly/#012","title":"0.1.2","text":"<ul> <li>Da kommt bald was ...</li> </ul>"},{"location":"sub/mkdocs_material_langly/#011-initial-release","title":"0.1.1 - Initial Release","text":"<ul> <li>Einf\u00fcgen einer \"index.html\" mit Umleitung zur Zielsprache nach Browsersprache.</li> <li>Konfigurieren Sie MKDocs und das Materialthema f\u00fcr jedes Build in der jeweiligen Sprache.</li> <li>Optionale Sprachumschaltung, die automatisch konfiguriert wird.</li> <li>Setzen aller offenen \u00dcbersetzungen w\u00e4hrend <code>serve</code> in den Draft-Mode, um den Zugriff auf die \u00dcbersetzungs-Api zu minimieren.</li> <li>Durchsuchen des Seiteninhaltes, um zus\u00e4tzliche \u00dcbersetzungen zu finden, die mit Plugins von Drittanbietern wie <code>mkdocs-strings</code> erstellt wurden.</li> <li>Speichern aller \u00dcbersetzungen in einer JSON-Datei pro Seite, um den Zugriff auf die \u00dcbersetzungs-Api zu minimieren und manuelle \u00c4nderungen zu erm\u00f6glichen.</li> <li>Konvertiert Markdown in HTML, \u00fcbersetzt und konvertiert zur\u00fcck, um Textformatierungen wie <code>code</code>, <code>strong</code> und <code>em</code> zu erhalten.</li> <li>Fixe-W\u00f6rter in Code-Tags mit tempor\u00e4ren HTML-Attributen erhalten.</li> <li>\u00dcbersetzung der Navigation</li> <li>Kopieren Sie die f\u00fcr gh-deploy erforderliche CNAME-Datei in das Stammverzeichnis des Build's.</li> <li>Begrenzungszeichen (z.B. <code>[[</code> &amp; <code>]]</code>) innerhalb einer Maskierung ignorieren.</li> </ul>"},{"location":"sub/mkdocs_material_langly/#feedback-and-support","title":"Feedback and support","text":"<p>I am happy to receive any kind of feedback and support.</p> <p>Thank you for your interest in this plugin!</p> <p>Have fun translating!</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/caldera/","title":"Caldera","text":""},{"location":"blog/category/powershell/","title":"Powershell","text":""}]}