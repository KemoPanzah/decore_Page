{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"decore Base | Ui fastly","text":"<p>Hier entsteht gerade die Dokumentation f\u00fcr decore Base.</p>"},{"location":"blog/","title":"Willkommen in meinem Blog","text":"<p>Hier schreibe ich \u00fcber meine Erfahrungen und Erkenntnisse, die ich im Laufe meiner Arbeit aber auch im allgemeinen gesammelt habe.</p> <p>Ich hoffe, dass ich Ihnen mit meinen Beitr\u00e4gen weiterhelfen kann.</p>"},{"location":"blog/2024/powershell-deploy_autodesk_software/","title":"Verteilung von Autodesk-Software mit ODIS-Installer und PowerShell unter Vermeidung des Double-Hop-Problems","text":"<p>Seitdem Autodesk sein Deployment-System auf den ODIS-Installer umgestellt hat, laufen alle Verteilungen, die unbeaufsichtigt \u00fcber den SYSTEM-Account ausgerollt werden, ohne Erfolgscode endlos weiter.</p> <p>Die genaue Fehlermeldung im ODIS-Log lautet:</p> <pre><code>2023-06-15T15:17:04.012 [DDA: 2196, single] [Installer INFO] [ Autodesk::DDA::SdkAgent::Listen::&lt;lambda_8f7c2cafda285d6f3324fbe86a24bae4&gt;::operator () ] [IPC] ChannelWin::Listen: WaitForSingleObject timeout. error_code: 997, pipe_name: \\\\.\\pipe\\adsk_dda_sdk\n</code></pre> <p>Nach einer Weile scheint der Installer-Dienst auch beendet zu werden, sendet aber keinen Exit-Code mehr.</p> <p>Ich habe viele Deployment-Suiten ausprobiert, aber das Resultat ist immer dasselbe, wenn der SYSTEM-Account zum Einsatz kommt.</p> <p>Um das Problem vor\u00fcbergehend zu l\u00f6sen, bis Autodesk das Problem erkennt und behebt, habe ich nun L\u00f6sungsans\u00e4tze entwickelt, die mir hier bei der Arbeit Abhilfe verschaffen.</p> <p>Mein geplanter Ansatz war, die Verteilung \u00fcber PowerShell zu realisieren, aber dabei stie\u00df ich erneut auf eine weitere H\u00fcrde, die die Kerberos-Authentifizierung mit sich bringt: das sogenannte Double-Hop-Problem, da meine Softwarepakete in CIFS-Freigaben lagern.</p> <p>Kerberos l\u00e4sst es nicht zu, dass nach einer Authentifizierung auf einem Remote-PC eine weitere Authentifizierung \u00fcber diesen Endpunkt zu anderen entfernten Zielen durchgef\u00fchrt wird. Es gibt also keinen zweiten Hop. Um das Problem zu umgehen, gibt es wenige, aber komplizierte Wege oder einen, bei dem jetzt alle sagen werden: \"Oh mein Gott, tu das nicht\", aber ich hau es einfach mal raus.</p> <p>Die L\u00f6sung ist, CredSSP nur tempor\u00e4r als Punkt-zu-Punkt-Verbindung zu nutzen und nach dem Deployment wieder zu entsch\u00e4rfen. Es sollte unter keinen Umst\u00e4nden unternehmensweit erlaubt werden.</p> <p>Info</p> <p>CredSSP hat keinen Single-Hop-Zwang. Authentifizierungen k\u00f6nnen in einer CredSSP-Sitzung weiterverwendet werden. Sollte das unternehmensweit und dauerhaft erlaubt werden, kann das zu erheblichen Sicherheitsproblemen f\u00fchren.</p> <p>Hier nun das Skript f\u00fcr alle, die vor dem selben Problem stehen.</p> <p>Das hier beschriebene Skript ist bewusst flach gehalten, um es verst\u00e4ndlich zu machen und den weiteren Ausbau durch Euch so einfach wie m\u00f6glich zu gestalten.</p> <p>Info</p> <p>Bitte beachten Sie, dass in diesem Beispiel CredSSP nur tempor\u00e4r verwendet wird und nach dem Deployment wieder deaktiviert wird. Zudem wird ausschlie\u00dflich der angegebene Remote-Computer delegiert und nicht das gesamte Netzwerk.</p> <p>Nach gr\u00fcndlicher Validierung hat sich dieser Ansatz als sicherer und einfacher Weg erwiesen, um das gew\u00fcnschte Ziel zu erreichen.</p> <p>Warning</p> <p>Dieses Skript muss mit administrativen Rechten ausgef\u00fchrt werden, um die CredSSP-Authentifizierung zu aktivieren und zu deaktivieren.</p> <pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '-i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n\n# Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n\ntry {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n\n    # Create a new PSSession with CredSSP authentication\n    $session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n\n    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\nfinally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Erkl\u00e4ren wir nun die einzelnen Schritte des Skripts:</p> <p><pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n</code></pre> Das Skript kann entweder mit Parametern aufgerufen werden, oder Sie tragen Ihre spezifischen Werte direkt ein. Die notwendigen Informationen f\u00fcr den Installer und die Argumente finden Sie nach der Image-Erstellung im entsprechenden Installations-Skript. Ein typischer Name f\u00fcr eine Revit-Installation k\u00f6nnte beispielsweise <code>Install Autodesk Revit 2024.bat</code> sein.</p> <p>Die Parameter f\u00fcr die Silent-Installation und Deinstallation sind ebenfalls dort hinterlegt. Diese Parameter erm\u00f6glichen eine unbeaufsichtigte Installation bzw. Deinstallation der Software, was besonders in gro\u00dfen IT-Umgebungen von Vorteil ist.</p> <p>F\u00fcr weitere Details und eine ausf\u00fchrliche Anleitung zur Bereitstellung von Autodesk-Software, besuchen Sie bitte den folgenden Artikel:</p> <p>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</p> <pre><code># Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n</code></pre> <p>Um eine PowerShell-Sitzung unter Verwendung von CredSSP zu starten, ben\u00f6tigen wir die Anmeldeinformationen eines Benutzers mit den erforderlichen Rechten zur Durchf\u00fchrung von Installationen. In den meisten F\u00e4llen handelt es sich dabei um den Domain-Admin. Ein Dialogfeld wird angezeigt, in dem Sie die Anmeldeinformationen eingeben k\u00f6nnen.</p> <pre><code>try {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n</code></pre> <p>Hier wird CredSSP sowohl auf dem Client als auch auf dem Server aktiviert. Es ist hilfreich, die Begriffe \"Verteiler\" (Client) und \"Empf\u00e4nger\" (Server) zu verwenden, um die Rollen klarer zu definieren. Der Try-Block umfasst alle potenziell fehleranf\u00e4lligen Aktionen und kann nach Belieben angepasst werden. F\u00fcr den Anfang ist diese Struktur einfach und robust.</p> <pre><code># Create a new PSSession with CredSSP authentication\n$session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n</code></pre> <p>Hier wird eine neue PowerShell-Sitzung mit CredSSP-Authentifizierung erstellt.</p> <pre><code>    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\n</code></pre> <p>Hier wird das Skript auf dem Remote-Computer ausgef\u00fchrt. Der Name, der Installer und die Argumente werden als Parameter \u00fcbergeben. An dieser Stelle endet der Try-Block.</p> <pre><code>finally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Im Finally-Block wird die PowerShell-Sitzung geschlossen und CredSSP auf dem Server und Client deaktiviert. Der Finally-Block wird immer ausgef\u00fchrt, unabh\u00e4ngig davon, ob der Try-Block erfolgreich war oder nicht. Bitte beachten Sie, dass das Abfangen von Fehlern auch \u00fcber einen m\u00f6glichen Exception-Block erfolgen kann. Dies \u00fcberlasse ich dem findigen Leser.</p> <p>Dieses Skript dient mir nun selbst als Grundlage f\u00fcr Erweiterungen. Ich werde nun daran arbeiten, ein \u00fcbergeordnetes Skript zu entwickeln, um die Installationen in gro\u00dfen Mengen zu steuern und zu \u00fcberwachen.</p> <p>Quellangaben</p> <ul> <li>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</li> <li>https://learn.microsoft.com/en-us/powershell/scripting/security/remoting/ps-remoting-second-hop?view=powershell-7.4</li> </ul>"},{"location":"doc/decore/","title":"Basisklasse","text":""},{"location":"doc/decore/#decore","title":"<code>decore</code>","text":""},{"location":"doc/decore/#decore.Decore","title":"<code>Decore</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"doc/decore/#decore.Decore.app","title":"<code>app(title, desc=None, role=0, dev=True)</code>","text":"<p>Eine Funktion zum er\u00f6ffnen einer GUI-Dashboard-Anwendung. Sie wird als \"Decorator\" verwendet.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Der Titel der App.</p> required <code>desc</code> <code>str</code> <p>Die Beschreibung der App.</p> <code>None</code> <code>role</code> <code>int</code> <p>Die Rollenangabe dient dazu, nur berechtigte Elemente ans Framework zu liefern. Rolle 0 erm\u00f6glicht es dem Gast-Account, sofort auf die App zuzugreifen. Alles \u00fcber 0 erfordert eine Anmeldung.</p> <code>0</code> <code>dev</code> <code>bool</code> <p>Der Entwicklungsmodus aktiviert die CORS-Header, bereitet die Anwendung beim ersten Lauf vor, aktiviert weitere Dev-Features und erm\u00f6glicht es, die App auf einem lokalen Server zu testen.</p> <code>True</code> <pre><code>    @decore.app(title='decore Sample', role=0)\n    def main():\n        pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.base","title":"<code>base(icon=None, title=None, desc=None, hide=False, role=0, model=Decore_model, private=False, stretch=False, navigation='main-top')</code>","text":"<p>Eine Funktion zum registrieren einer Basis in der GUI-Dashboard-Anwendung. Sie wird als \"Decorator\" verwendet.</p> <p>Die Basis ist das Tr\u00e4gerelement f\u00fcr die Ansicht und die Vorlage f\u00fcr die Datenquelle im Frontend.</p> <p>:param str icon: Das Symbol der Basis. :param str title: Der Titel der Basis. :param str desc: Die Beschreibung der Basis. :param Model model: Das Datenmodell der Basis.</p> <p>.. code-block:: python</p> <pre><code>@decore.base(icon='mdi-account', title='Person', desc='A basis for managing personal data', model=Person)\nclass Person_base:\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.view","title":"<code>view(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='default', fields=[], filters=[], query={}, pag_type='client', pag_recs=16)</code>","text":"<p>Eine Funktion zur Registrierung einer Ansicht. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Ansicht ist ein Container f\u00fcr die Anzeige von Daten.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Ansicht in einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Ansicht. :param str title: Der Titel der Ansicht. :param str desc: Die Beschreibung der Ansicht. :param str type: Gibt an wie die Datens\u00e4tze angezeigt werden. Der Wert <code>table</code> stellt die Datens\u00e4tze in einer Tabelle dar. :type type: Literal['default'] :param list fields: Die Felder, die in der Ansicht angezeigt werden. :param list filters: Die Filter, die in der Ansicht angezeigt werden. :param dict query: Die Abfrage, die in der Ansicht angezeigt wird. :param str pag_type: W\u00e4hlt die Methode wie die Datens\u00e4tze der View geladen werden. Der Wert <code>client</code> l\u00e4dt alle Datens\u00e4tze auf einmal und \u00fcberl\u00e4sst den Seitenaufbau dem Frontend. :type pag_type: Literal['client'] :param int pag_recs: Gibt an wieviele Datens\u00e4tze auf einer Seite der Ansicht angezeigt werden sollen. <code>16</code> ist die Standardeinstellung.</p> <p>.. code-block:: python</p> <pre><code>@decore.view(icon='mdi-account', title='Person', desc='A view for managing personal data', type='table', fields=[Person.id, Person.name, Person.age], filters=[Person.name, Person.age], query={'name__eq': 'Kemo'}, pag_type='client', pag_recs=16)\ndef person_view():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.dialog","title":"<code>dialog(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='standard', activator='empty')</code>","text":"<p>Eine Funktion zur Registrierung eines Dialogs. Sie wird als \"Decorator\" verwendet.</p> <p>Der Dialog ist das Tr\u00e4gerelement f\u00fcr Widgets </p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn der Dialog in einer Ansicht einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Dialogs. :param str title: Der Titel des Dialogs. :param str desc: Die Beschreibung des Dialogs. :param str type: Gibt an wie der Dialog die Widgets darstellen wird. Der Wert <code>standard</code> stellt die untergeordneten Widgets und Sub-Widgets untereinander dar. :type type: Literal['standard'] :param str display: Der Anzeigetyp des Dialogs. Standardwert ist <code>draw-half</code>. :type display: Literal['modal', 'draw-half', 'draw-full'] :param str activator: Der Aktivatortyp des Dialogs. \u00dcber den Wert <code>none</code> wird der Dialog sofort beim OnLoad Ereignis der View angezeigt. Der Wert <code>default</code> stellt den Dialog im Top-Menu der View dar. Der Wert <code>context</code> stellt den Dialog im Kontextmen\u00fc eines Items der View dar. Der Wert <code>click</code> zeigt den Dialog dann an wenn man einen Datensatz anklickt. :type activator: Literal['none', 'default', 'context', 'click']</p> <p>.. code-block:: python</p> <pre><code>@decore.dialog(icon='mdi-account', title='Person', desc='A dialog for managing personal data', type='standard', display='drawer', activator='default-menu')\ndef person_dialog():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.widget","title":"<code>widget(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='default', layout='ceta', fields=[])</code>","text":"<p>Eine Funktion zur Registrierung eines Widgets. Sie wird als \"Decorator\" verwendet.</p> <p>Ein Widget dient zur Darstellung und Interaktion mit dem Datensatz. Es erh\u00e4lt die Daten, die der Dialog-Aktivator vorgibt. Der Wert <code>none</code> \u00fcbergibt den letzten Datensatz der Datenbanktabelle. Der Wert <code>default</code> \u00fcbergibt einen nur mit Default-Werten gef\u00fcllten Datensatz. Beim Wert <code>context</code> \u00fcbergibt es den Datensatz, der im Kontextmen\u00fc der Ansicht ausgew\u00e4hlt wurde. Und <code>click</code> \u00fcbergibt den Datensatz, der angeklickt wurde. </p> <p>Widgets, welche aus einer fremden Basis einem Dialog zugeordnet werden, erg\u00e4nzen die relationalen Felder eines Default-Items der fremden Datenquelle mit den Daten des aktivierten Items. (Der Satz ist Schei\u00dfe zu verstehen, aber er trifft genau das, was es tut). In der Sample Anwendung verwende ich das beim Zuweisen von \"Contracts\" zu einer \"Person\". </p> <p>Es gibt aber auch Widgets, die mehrere Datens\u00e4tze darstellen k\u00f6nnen, wie im Beispiel davor werden hier auch die Relationen verwendet, um nur Daten abzubilden, die etwas mit dem gew\u00e4hlten Item zu tun haben.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn das Widget in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Widgets. :param str title: Der Titel des Widgets. :param str desc: Die Beschreibung des Widgets. :param str type: Gibt an wie das Widget die Daten darstellen wird. Standardwert ist <code>default</code>. :type type: Literal['default', 'info', 'form', 'table'] :param list fields: Die Felder, die in dem Widget angezeigt werden.</p> <p>.. code-block:: python</p> <pre><code>@decore.widget(icon='mdi-account', title='Person', desc='A widget for managing personal data', type='form', layout='cera', fields=[Person.name, Person.age])\ndef person_widget():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.template","title":"<code>template(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0)</code>","text":"<p>Eine Funktion zur Registrierung einer Vorlage. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Vorlage ist HTML-Code der im Layout der View oder des Widgets gerendert wird.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Vorlage in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Vorlage. :param str title: Der Titel der Vorlage. :param str desc: Die Beschreibung der Vorlage. :param str name: Der Name der Vorlage.</p> <p>.. code-block:: python</p> <pre><code>@decore.template(icon='mdi-account', title='Person', desc='A html template', name='person_template')\ndef person_template():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.hook","title":"<code>hook(parent_id=None, icon=None, title=None, desc=None, role=0)</code>","text":"<p>Eine Funktion zur Registrierung eines \"Hakens\". Sie wird als \"Decorator\" verwendet. </p> <p>Ein Haken ist eine Funktion zum abfangen des Load-Ereignisses der \u00fcbergeordneten Komponente. Er kann dazu genutzt werden um vor dem Laden einer Komponente Bedingungen im Backend zu pr\u00fcfen und gegebenenfalls den Pool zu manipulieren oder die Route zu \u00e4ndern. </p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn der Haken in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Hakens. :param str title: Der Titel des Hakens. :param str desc: Die Beschreibung des Hakens. :param str name: Der Name des Hakens.</p> <p>.. code-block:: python</p> <pre><code>@decore.hook(icon='mdi-account', title='Person', desc='A hook to catch events')\ndef sample_hook(**kwargs):\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.action","title":"<code>action(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='standard', activator='none', errors=True)</code>","text":"<p>Eine Funktion zur Registrierung einer Aktion. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Aktion ist die tats\u00e4chliche Interaktion zwischen dem Benutzer und dem Backend.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Aktion in einem Widget einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Aktion. :param str title: Der Titel der Aktion. :param str desc: Die Beschreibung der Aktion. :param str type: Gibt an was die Aktion kann. Standardwert ist <code>standard</code>. :type type: Literal['standard', 'submit'] :param str activator: Gib an, wie die Aktion ausgel\u00f6st wird. :type activator: Literal['default', 'context', 'click'] :param bool errors: Gibt an, ob die Aktion Validierungsfehler zur\u00fcckgeben kann. Standardwert ist <code>True</code>. (Im Augenblick wirkt sich das nur auf den Typen <code>submit</code> aus.)</p> <p>.. code-block:: python</p> <pre><code>@decore.action(icon='mdi-account', title='Person', desc='A action for managing personal data', type='submit')\ndef sample_action(**kwargs):\n    pass\n</code></pre> <p>Die Aktionen durchlaufen ein Modul, welches die erhaltenen Daten aufbereitet und als Keyword-Parameter an die dekorierte Funktion \u00fcbergibt. Es ist alles in den <code>kwargs</code> zu finden und man macht sich diese einfach verf\u00fcgbar. Der Parameter <code>item</code> ist ein Beispiel daf\u00fcr und repr\u00e4sentiert den vom Frontend zur\u00fcckgegebenen Datensatz. Um herauszufinden, was alles noch in den <code>kwargs</code> steckt, bitte den Debugger benutzen.</p>"},{"location":"doc/decore/#decore.Decore.function","title":"<code>function(type='shot')</code>","text":"<p>Eine Funktion zur Registrierung einer Funktion in der \u00fcbergeordneten Base. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Funktion wird direkt nach der Zusammenstellung des Metadaten-Pool ausgef\u00fchrt. Mit Funktionen kann man die Logik erweitern, Dinge vorbereiten oder Hintergrundaufgaben erledigen. Sie agieren als Instanzmethoden der Basis und erhalten damit den objektorientierten Ansatz.</p> <p>:param str type: Gibt an wie eine Funktion ausgef\u00fchrt wird. Mit dem Wert <code>shot</code> wird sie nur einmal ausgef\u00fchrt. Der Wert <code>work</code> wird in einem Thread ausgef\u00fchrt und kann somit Schleifen abarbeiten die niemals enden bis der Main-Thread endet. :type type: Literal['shot', 'work']</p> <p>.. code-block:: python</p> <pre><code>@decore.function(type='shot')\ndef sample_function(self):\n    pass\n</code></pre>"},{"location":"doc/fields/","title":"Felder und Typen","text":""},{"location":"doc/fields/#classes.decore_fields","title":"<code>classes.decore_fields</code>","text":""},{"location":"doc/fields/#classes.decore_fields.BackrefMetaField","title":"<code>BackrefMetaField</code>","text":"<p>               Bases: <code>MetaField</code></p> <p>Das BackrefMetaField wird ben\u00f6tigt damit decore Front Beziehungen zwischen Modellen darstellen kann. Es kann z.B. dem Filter oder einem Formular zugewiesen werden. Es ist ein MetaField und erh\u00e4lt keine Spalte in der Datenbank.</p> <p>Parameters:</p> Name Type Description Default <code>verbose_name</code> <code>str</code> <p>Ein vom Benutzer lesbarer Name f\u00fcr das Feld.</p> <code>None</code> <code>help_text</code> <code>str</code> <p>Zus\u00e4tzlicher Text, der in decore Front angezeigt wird.</p> <code>None</code> <code>filter_fields</code> <code>list</code> <p>Eine Liste vom Typ String. Es werden nur die angegebenen Felder im Filter angezeigt. Wenn <code>empty</code>, werden alle Felder angezeigt.</p> <code>[]</code> <code>choice_query</code> <code>dict</code> <p>Ein <code>dictonary</code>, das eine Abfrage enth\u00e4lt, die beim laden von Optionen (z.B. in Auswahlfeldern im Frontend) ber\u00fccksichtigt wird. Die Abfrage muss sich auf das Referenzmodell beziehen.</p> <code>{}</code> <p>Warning</p> <p>Der Name des <code>BackRefMetaField</code> muss mit dem Wert des angegebenen <code>backref</code> Parameters im ForeignKey oder ManyToMany Feldes im Referenzmodell \u00fcbereinstimmen. Im folgendem Beispiel ist der Name des <code>BackRefMetaField</code> gleich <code>accounts</code> und ebenso der Wert des ForeignKey <code>backref</code> Parameters.</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre> <pre><code>class Account(Conform_model):\n    user = ForeignKeyField(User, backref='accounts', null=True, verbose_name='User')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.BooleanField","title":"<code>BooleanField</code>","text":"<p>               Bases: <code>BooleanField</code></p> <p>A field to store boolean values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.CharField","title":"<code>CharField</code>","text":"<p>               Bases: <code>CharField</code></p> <p>A field to store char values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool unique: If True, the field must be unique in database table. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.DateField","title":"<code>DateField</code>","text":"<p>               Bases: <code>DateField</code></p> <p>A field to store date values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.DateTimeField","title":"<code>DateTimeField</code>","text":"<p>               Bases: <code>DateTimeField</code></p> <p>A field to store datetime values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.FloatField","title":"<code>FloatField</code>","text":"<p>               Bases: <code>FloatField</code></p> <p>A field to store float values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.PasswordField","title":"<code>PasswordField</code>","text":"<p>               Bases: <code>Field</code></p> <p>:warning      The keybase is a KeePass file and should be protected by setting the correct access rights (ACL).</p> <p>A field to store passwords in the keybase and to use them again.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    password = PasswordField(null=False, verbose_name='Password')\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.ForeignKeyField","title":"<code>ForeignKeyField</code>","text":"<p>               Bases: <code>ForeignKeyField</code></p> <p>A field to represent a one-to-many relationship between two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p>"},{"location":"doc/fields/#classes.decore_fields.IntegerField","title":"<code>IntegerField</code>","text":"<p>               Bases: <code>IntegerField</code></p> <p>A field to store integer values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.ManyToManyField","title":"<code>ManyToManyField</code>","text":"<p>               Bases: <code>ManyToManyField</code></p> <p>A field to represent a many-to-many relationship between two models. It is a MetaField and does not get a column in the database. However, a through model is created by decore Base, which represents the relationship between the two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p> <p>.. code-block:: python</p> <pre><code>class Account(Conform_model):\n    users = ManyToManyField(User, backref='accounts', null=True, verbose_name='Users')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.TextField","title":"<code>TextField</code>","text":"<p>               Bases: <code>TextField</code></p> <p>A field to store text values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"sub/mkdocs_material_langly/","title":"MKDocs Material Langly Plugin","text":"<p>Das Langly-Plugin f\u00fcr MkDocs ist ein Plugin, das Sprachunterst\u00fctzung und \u00dcbersetzungen f\u00fcr Webseiten bietet, die mit MkDocs erstellt wurden. Es erm\u00f6glicht die einfache Verwaltung mehrsprachiger Inhalte und die automatische \u00dcbersetzung von Texten, um eine breitere Zielgruppe zu erreichen.</p> <p>Es wurde unter Verwendung des gro\u00dfartigen Material-Themes erstellt und bietet Funktionalit\u00e4ten auch den Blogbereich mit zu \u00fcbersetzen.</p> <p>Die derzeitige \u00dcbersetzungsengine ist Deepl und es wird ein Deepl-Api-Key ben\u00f6tigt, um das Plugin zu verwenden.</p> <p>Note</p> <p>Das Plugin ist noch in der Entwicklung und es wird empfohlen, die Dokumentation zu lesen, um die Funktionalit\u00e4ten und Einschr\u00e4nkungen zu verstehen. Ich bitte auch alle Anforderungen und \u00c4nderungsvoschlage in den Issues zu melden.</p>"},{"location":"sub/mkdocs_material_langly/#lasst-uns-anfangen","title":"Lasst uns Anfangen","text":"<p>Um das Plugin zu verwenden, m\u00fcssen Sie es zuerst installieren. F\u00fchren Sie dazu den folgenden Befehl aus:</p> <pre><code>pip install mkdocs-material-langly\n</code></pre> <p>Nach der Installation k\u00f6nnen Sie das Plugin in Ihrer <code>mkdocs.yml</code>-Konfigurationsdatei aktivieren:</p> <pre><code>plugins:\n  - search\n  - langly:\n      source:\n          name: Deutsch\n          lang: de\n      targets:\n        - name: English\n          lang: en-us\n</code></pre>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/powershell/","title":"Powershell","text":""}]}