{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"decore Base | Ui fastly","text":"<p>Hier entsteht gerade die Dokumentation f\u00fcr decore Base.</p>"},{"location":"blog/","title":"Willkommen in meinem Blog","text":"<p>Hier schreibe ich \u00fcber meine Erfahrungen und Erkenntnisse, die ich im Laufe meiner Arbeit, aber auch im allgemeinen gesammelt habe.</p> <p>Im Gro\u00dfen und Ganzen handelt es sich um eine Ansammlung meiner technischen Dokumentationen, die sowohl f\u00fcr Anf\u00e4nger als auch f\u00fcr Fortgeschrittene n\u00fctzlich sein k\u00f6nnen. Es ist mein Ziel, durch das Teilen meines Wissens und meiner Erfahrungen anderen zu helfen, ihre eigenen technischen Herausforderungen zu meistern.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/","title":"Installation von Caldera Dock und Caldera Rip auf Ubuntu Desktop 22.04","text":"<p>In diesem Beitrag wird die Installation von Caldera Dock und Caldera Rip auf einem Ubuntu Desktop 22.04 System detailliert beschrieben. Die Anleitung umfasst die Vorbereitung des Systems, die Installation von Ubuntu, sowie die anschlie\u00dfende Installation und Konfiguration von Caldera Dock und Caldera Rip. Zus\u00e4tzlich wird die Einrichtung von XRDP zur Remote-Verbindung erl\u00e4utert. Diese Schritt-f\u00fcr-Schritt-Anleitung richtet sich an Benutzer, die entweder eine virtuelle Maschine oder einen physischen Computer verwenden m\u00f6chten.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#vorbereitung","title":"Vorbereitung","text":"<p>Bevor mit der Installation von Caldera Dock und Caldera Rip auf Ubuntu 22.04 begonnen werden kann, gibt es einige grundlegende Schritte, die durchgef\u00fchrt werden sollten.</p> <p>F\u00fcr die Installation kann entweder eine virtuelle Maschine (VM) oder ein physischer Computer (Bare Metal) verwendet werden. Beide Optionen sind geeignet und bieten die notwendigen Voraussetzungen f\u00fcr die Installation. In diesem Beispiel wird eine Proxmox VM verwendet, aber auch andere Virtualisierungsplattformen k\u00f6nnen genutzt werden.</p> <p>Es sollte sichergestellt werden, dass das System \u00fcber eine funktionierende Internetverbindung verf\u00fcgt, um w\u00e4hrend der Installation Updates herunterladen zu k\u00f6nnen und sicherzustellen, dass alle ben\u00f6tigten Pakete und Abh\u00e4ngigkeiten verf\u00fcgbar sind. Die Systemanforderungen von Caldera sollten eingehalten werden, diese k\u00f6nnen auf der offiziellen Caldera-Website eingesehen werden.</p> <p>Es wird empfohlen, vor der Installation ein Backup des Systems zu erstellen, um sicherzustellen, dass im Falle eines Problems alle Daten gesichert sind. Zudem sollte die Dokumentation von Caldera gelesen werden, um sich mit den spezifischen Anforderungen und Schritten f\u00fcr die Installation vertraut zu machen.</p> <p>Nachdem die Vorbereitungen abgeschlossen sind, kann mit der Installation von Caldera Dock und Caldera Rip auf Ubuntu 22.04 begonnen werden.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-ubuntu-desktop-2204","title":"Installation Ubuntu Desktop 22.04","text":"<p>Nach dem mounten des aktuellen <code>Ubuntu Desktop 22.04</code> Isos entweder \u00fcber USB Stick oder als Bootmedium in der VM, wird die Installtionsroutine gestartet.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installationsschritte","title":"Installationsschritte","text":"<ul> <li>Der Willkommensbildschirm erscheint, der die Optionen bietet, Ubuntu auszuprobieren oder zu installieren. Zuerst die bevorzugte Sprache ausw\u00e4hlen und dann die Option Ubuntu installieren w\u00e4hlen und die Eingabetaste dr\u00fccken.</li> <li>Die Tastaturbelegung ausw\u00e4hlen und auf Weiter klicken.</li> <li>Die Minimale Installation, W\u00e4hrend Ubuntu installiert wird Aktualisierungen herunterladen und Installieren Sie Software von Drittanbietern f\u00fcr Grafik- und Wi-Fi-Hardware und zus\u00e4tzliche Medienformate ausw\u00e4hlen und auf Weiter klicken.</li> <li>Als n\u00e4chstes die Option Festplatte l\u00f6schen und Ubuntu installieren ausw\u00e4hlen und auf Jetzt Installieren klicken.</li> <li>Standort ausw\u00e4hlen und auf Weiter klicken.</li> <li>Alle Felder unter Wer sind Sie? wie folgt ausf\u00fcllen:<ul> <li>Ihr Name: <code>caldera</code></li> <li>Name Ihres Rechners: Hier den tas\u00e4chlichen DNS-Namen w\u00e4hlen wie der PC sp\u00e4ter angesprochen werden soll. z.B. <code>calderarip</code></li> <li>Bitte Benutzernamen ausw\u00e4hlen: <code>caldera</code></li> <li>Ein Passwort w\u00e4hlen: <code>caldera</code> (Laut Hersteller Dokumentation)</li> <li>Passwort zum anmelden abfragen (emphiehlt sich wenn xrdp f\u00fcr die Verbindung zum Ubuntu Desktop eingesetzt wird)</li> </ul> </li> <li>Nachdem alle Felder ausgef\u00fcllt sind, auf Weiter klicken.</li> </ul> <p>Warten, bis die Installation abgeschlossen ist, und das System neu starten.</p> <p>Nach dem Neustart sollte <code>Ubuntu Desktop 22.04</code> erfolgreich installiert sein und eine Anmeldung mit dem zuvor erstellten Benutzer ist m\u00f6glich.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-von-caldera-dock","title":"Installation von Caldera Dock","text":"<p>Nach der Installation von <code>Ubuntu Desktop 22.04</code> kann mit der Installation von Caldera Dock fortgefahren werden.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#download-der-installationsdatei","title":"Download der Installationsdatei","text":"<ul> <li>Bei <code>Caldera WorkSpace</code> anmelden und zur Haupt-Dashboard-Seite gehen.</li> <li>Auf die Schaltfl\u00e4che Installieren klicken, um die Installationsdatei zu finden. Caldera Dock (Ubuntu) herunterladen.</li> </ul>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installieren-sie-die-heruntergeladene-deb-datei","title":"Installieren Sie die heruntergeladene .deb-Datei","text":"<ul> <li>Zu dem Ordnerwechseln , in dem die Installationsdatei gespeichert wurde.</li> <li>Die Installationsdatei finden, mit der rechten Maustaste darauf klicken und die Option Mit anderer Anwendung \u00f6ffnen w\u00e4hlen.</li> <li>Der Ubuntu-Installationsassistent wird angezeigt. Software-Installation ausw\u00e4hlen.</li> <li>Einige Sekunden warten, bis die Installationsdateien geladen sind, und dann auf Installieren klicken.</li> <li>Vor der Fortsetzung der Installation wird eine Authentifizierung verlangt. Das Passwort eingeben, das bei der Installation von <code>Ubuntu Desktop 22.04</code> festgelegt wurde.</li> </ul> <p>Die Installation wird nun durchgef\u00fchrt.</p> <p>Sobald die Installation abgeschlossen ist, kann <code>Caldera Dock</code> \u00fcber das Hauptmen\u00fc oder die Suchleiste gestartet werden.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installieren-der-setup-tools","title":"Installieren der Setup-Tools","text":"<ul> <li>Auf der Startseite von <code>Caldera Dock</code> im Abschnitt Setup-Tools auf Installieren klicken.</li> <li>Danach auf Konfigurieren und mit dem Passwort best\u00e4tigen.</li> </ul> <p>Nach einiger Zeit wird die Installation abgeschlossen sein und die Setup-Tools sind einsatzbereit.</p> <p>Ein Neustart wird empfohlen, um sicherzustellen, dass alle \u00c4nderungen wirksam werden.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-von-caldera-rip","title":"Installation von Caldera Rip","text":"<p>Nun die Anleitungsschritte zur Installation von <code>Caldera Rip</code> auf <code>Ubuntu Desktop 22.04</code>.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-von-caldera-rip_1","title":"Installation von Caldera Rip","text":"<ul> <li>Im <code>Caldera Dock</code> auf Anwendungen klicken.</li> <li><code>Caldera Rip</code> suchen und auf Installieren klicken.</li> <li>Die Swap-Datei vergr\u00f6\u00dfern, wenn die Meldung erscheint.</li> <li>Nach dem Download und vor der Installation wird eine Authentifizierung verlangt. Das Passwort eingeben, das bei der Installation von <code>Ubuntu Desktop 22.04</code> festgelegt wurde.</li> </ul> <p>Ein weiterer Neustart sollte anschlie\u00dfend durchgef\u00fchrt werden.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#einrichten-von-xrdp","title":"Einrichten von XRDP","text":"<p>Um eine Verbindung zum <code>Ubuntu Desktop 22.04</code> \u00fcber <code>XRDP</code> herzustellen, sind einige zus\u00e4tzliche Schritte erforderlich.</p>"},{"location":"blog/2025/caldera-install_caldera_dock_rip_ubuntu/#installation-von-xrdp","title":"Installation von XRDP","text":"<ul> <li>\u00d6ffnen Sie ein Terminal und f\u00fchren Sie den folgenden Befehl aus, um <code>XRDP</code> zu installieren:</li> </ul> <pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install xrdp -y\n</code></pre> <ul> <li>Nach der Installation von <code>XRDP</code> f\u00fchren Sie den folgendene Befehle aus, um den <code>XRDP</code>-Dienst zu aktivieren und zu starten:</li> </ul> <pre><code>sudo systemctl enable xrdp\nsudo systemctl start xrdp\n</code></pre> <ul> <li>F\u00fcgen Sie den Benutzer <code>xrdp</code> zur Gruppe <code>ssl-cert</code> hinzu, um die Verbindung zu erm\u00f6glichen:</li> </ul> <pre><code>sudo usermod -a -G ssl-cert xrdp\n</code></pre> <ul> <li>Nur RDP durch die lokale Firewall zulassen:</li> </ul> <pre><code>sudo ufw allow 3389\n</code></pre> <ul> <li>Um die Ubuntu-Session anstelle der Standard-GNOME-Session zu verwenden, in Ihrem Home-Verzeichnis die Datei .xsessionrc mit folgendem Inhalt erweitern:</li> </ul> <p><pre><code>nano ~/.xsessionrc\n</code></pre> - F\u00fcgen Sie folgende Zeilen hinzu:</p> <pre><code>export GNOME_SHELL_SESSION_MODE=ubuntu\nexport XDG_CURRENT_DESKTOP=ubuntu:GNOME\nexport XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg\n</code></pre> <ul> <li>Schlie\u00dflich XRDP neu starten, um die \u00c4nderungen zu \u00fcbernehmen:</li> </ul> <pre><code>sudo systemctl restart xrdp\n</code></pre> <p>Nachdem die Installation abgeschlossen ist, kann diee Verbindung zu Ihrem <code>Ubuntu Desktop 22.04</code> \u00fcber <code>XRDP</code> hergestellt werden.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/","title":"Wie erstellt man ein mehrsprachiges Webseiten- oder Dokumentations-Projekt mit MkDocs, Material, und Langly?","text":"<p> Designed by Freepik</p> <p>F\u00fcr alle, die eine mehrsprachige Webseite erstellen m\u00f6chten, bietet MkDocs in Kombination mit dem Material-Theme und dem Langly-Plugin eine hervorragende L\u00f6sung. In diesem Beitrag wird detailliert beschrieben, wie Sie eine internationale Webseite oder ein Dokumentationsprojekt mit MkDocs, Material und Langly erstellen k\u00f6nnen. Die Anleitung umfasst die Vorbereitung des Projekts, die Installation von MkDocs und Material sowie die anschlie\u00dfende \u00dcbersetzung der Inhalte mit Langly. Diese Schritt-f\u00fcr-Schritt-Anleitung richtet sich an Benutzer, die ein mehrsprachiges Web-Projekt erstellen m\u00f6chten.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#voraussetzungen","title":"Voraussetzungen","text":"<p>Um dieser Anleitung hier zu folgen werden einige Voraussetzungen ben\u00f6tigt. Prinzipiell sind abweichende Wege m\u00f6glich aber um alles so einfach wie m\u00f6glich zu halten, werden die hier gezeigten Schritte in Visual Studio Code durchgef\u00fchrt.</p> <ul> <li> Einen GitHub-Account um das Web-Projekt sp\u00e4ter zu ver\u00f6ffentlichen.</li> <li> Python und Git m\u00fcssen auf dem System installiert sein </li> <li> Visual Studio Code und die ben\u00f6tigten Erweiterungen f\u00fcr die Arbeit mit Python</li> <li> Einen DeepL-Free oder h\u00f6herwertigen Account.</li> </ul>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#los-gehts","title":"Los geht\u2019s","text":"<p>Warning</p> <p>Bevor wir starten, m\u00f6chte ich Sie eindringlich bitten, den Punkt DeepL-Api-Key bereitstellen und sch\u00fctzen besonders zu beachten. Es ist wichtig, dass die Datei <code>auth_key.json</code> in der <code>.gitignore</code> ausgeschlossen wird, um den Api-Key zu sch\u00fctzen und die Sicherheit Ihrer Daten zu gew\u00e4hrleisten.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#github-repository-erstellen","title":"GitHub Repository erstellen","text":"<p>Da sp\u00e4ter die Webseite oder Dokumentation im Internet (GH-Pages) ver\u00f6ffentlicht werden soll, wird ein GitHub-Repository ben\u00f6tigt. Man kann dieses \u00fcber die GitHub-Webseite erstellen, was sich empfiehlt, da so auch gleich eine <code>.gitignore</code>-Datei erstellt werden kann, die f\u00fcr dieses HowTo auch zwingend ben\u00f6tigt wird.</p> <p>Im GitHub-Dashboard auf <code>New</code> klicken und schon geht der Spa\u00df los.</p> <ol> <li>Einen beliebigen <code>Repository-Name</code> eingeben.</li> <li>Unter <code>Add .gitignore</code> bitte Python ausw\u00e4hlen.</li> <li>Und auf <code>Create Repository</code> klicken.</li> </ol> <p>Alle weiteren Felder sind f\u00fcr dieses Beispiel optional aber sollten nat\u00fcrlich auf die eigenen Bed\u00fcrfnisse angepasst werden.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#repository-klonen","title":"Repository klonen","text":"<p>Um das zuvor angelegte Repository zu klonen, navigiert man in VS Code zur Quellcodeverwaltung und dann auf Repository klonen. Nach dem Ausw\u00e4hlen des Repository mit dem zuvor bei GitHub erstellten Namen, wird das Repository in das gew\u00e4hlte Arbeitsverzeichnis geklont.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#virtuelles-python-environment-einrichten","title":"Virtuelles Python-Environment einrichten","text":"<p>Ist Python auf dem System installiert und die PATH Variable gesetzt ist die Einrichtung des <code>venv</code> sehr einfach. Man dr\u00fcckt in VS Code eigentlich nur die <code>F1</code>-Taste und w\u00e4hlt Python: Umgebung erstellen... aus.</p> <p>Im folgenden Dialog w\u00e4hlt man Venv und danach den Interpreter-Pfad der installierten oder bevorzugten Python-Version.</p> <p>Boom! Da ist ein <code>venv</code>.</p> <p>Regul\u00e4r aktiviert Visual Studio Code das <code>venv</code> dann auch automatisch, wenn eine Python-Datei ge\u00f6ffnet wird aber in unserem Fall wird das <code>venv</code> erst einmal f\u00fcr die Installation von MkDocs und Material ben\u00f6tigt und es existiert keine Python-Datei im Projekt-Verzeichnis.</p> <p>Also navigiert man \u00fcber das integrierte Terminal im Projekt-Stammverzeichnis in das <code>.venv</code>-Verzeichnis und danach in das <code>Scripts</code>-Verzeichnis und f\u00fchrt dort <code>activate</code>aus.</p> <p>Es sollte nun ein <code>(.venv)</code> vor dem Pfad im Terminal erscheinen.</p> <p>Weitere und detailliertere Informationen dazu gibt es auf dieser Webseite: Python Environments in VS Code</p> <p></p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#mkdocs-einrichten","title":"MkDocs einrichten","text":"<p>Um MkDocs zu installieren wird im Terminal folgender Befehl ausgef\u00fchrt.</p> <pre><code>pip install mkdocs\n</code></pre> <p>Nach dem alle Abh\u00e4ngigkeiten installiert wurden, m\u00fcssen wir das Projekt noch erstellen. Dazu wird im Terminal folgender Befehl ausgef\u00fchrt.</p> <pre><code>mkdocs new .\n</code></pre> <p>Jetzt folgt der Test. Dazu f\u00fchren wir den <code>serve</code>-Befehl erneut aus.</p> <pre><code>mkdocs serve\n</code></pre> <p>Wenn alles geklappt hat, sollte im Browser unter <code>http://127.0.0.1:8000/</code> die MkDocs-Startseite erscheinen.</p> <p></p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#material-theme-einrichten","title":"Material-Theme einrichten","text":"<p>Um das Material-Theme zu installieren wird im Terminal folgender Befehl ausgef\u00fchrt.</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Nach der Installation muss das Material-Theme noch in der <code>mkdocs.yml</code>-Konfigurationsdatei aktiviert werden. Dazu wird in der Datei folgender Eintrag hinzugef\u00fcgt.</p> <pre><code>site_name: &lt;Your Site Name&gt;\ntheme:\n  name: 'material'\n</code></pre> <p>Beim n\u00e4chsten <code>mkdocs serve</code> sollte dann auch das Material-Theme aktiviert sein.</p> <p></p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#langly-plugin-einrichten","title":"Langly-Plugin einrichten","text":"<p>Jetzt wird noch das Langly-Plugin installiert. Dazu wird im Terminal folgender Befehl ausgef\u00fchrt.</p> <pre><code>pip install mkdocs-material-langly\n</code></pre> <p>Nach der Installation muss das Langly-Plugin in der <code>mkdocs.yml</code>-Konfigurationsdatei aktiviert und eingerichtet werden. Hierf\u00fcr sind die Werte <code>source</code> und <code>targets</code> mit den gew\u00fcnschten Sprachen auszuf\u00fcllen. Die Quellsprache ist die Sprache, in der die Webseite oder Dokumentation erstellt wird, w\u00e4hrend die Zielsprachen die Sprachen sind, in die die Webseite oder Dokumentation \u00fcbersetzt werden soll.</p> <p>Warning</p> <p>Wichtig ist, dass das Langly-Plugin in der Reihenfolge der Plugins als letztes aufgef\u00fchrt wird.</p> <pre><code>plugins:\n  - search\n  - langly:\n      lang_switch: true\n      source:\n          name: English\n          lang: en\n      targets:\n        - name: Deutsch\n          lang: de\n        - name: Espa\u00f1ol\n          lang: es\n        - name: Fran\u00e7ais\n          lang: fr\n        - name: Italiano\n          lang: it\n</code></pre> <p>Die hier gew\u00e4hlten Sprachen sind nur Beispielhaft und k\u00f6nnen selbstverst\u00e4ndliche auf das eigene Vorhaben angepasst werden.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#deepl-api-key-bereitstellen-und-schutzen","title":"DeepL-Api-Key bereitstellen und sch\u00fctzen","text":"<p>Jetzt wird der DeepL-Api-Key ben\u00f6tigt. Diesen erh\u00e4lt man, indem man ein DeepL-Free-Konto erstellt. Sobald der Api-Key generiert wurde, wird eine Datei mit dem Namen <code>auth_key.json</code> im Hauptverzeichnis des Projekts angelegt und der Api-Key dort eingetragen.</p> <pre><code>{\n    \"deepl\": \"DEEPL-API-KEY\"\n}\n</code></pre> <p>Warning</p> <p>Bitte den Api-Key in der <code>.gitignore</code> ausschlie\u00dfen und auch auf jede erdenkliche Weise vor dem Upload ins Internet sch\u00fctzen.</p> <p>Um das zu erreichen wird eine neue Zeile ans Ende der <code>.gitignore</code> hinzugef\u00fcgt. Da wir sie beim Erstellen des Repositorys bei GitHub bereits angelegt haben, kann sie jetzt einfach ge\u00f6ffnet und bearbeitet werden.</p> <pre><code>auth_key.json\n</code></pre>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#ubersetzung-starten","title":"\u00dcbersetzung starten","text":"<p>Jetzt sind wir im Grunde genommen bereit, mit der \u00dcbersetzung zu beginnen. Um dies zu erreichen, wird der zu \u00fcbersetzende Inhalt in den Markdown-Dateien einfach maskiert, und das Langly-Plugin \u00fcbernimmt den Rest. Die Maskierung erfolgt, indem der zu \u00fcbersetzende Text mit <code>[[</code> und <code>]]</code> umschlossen wird.</p> <p>Probieren wir es einfach an der <code>index.md</code>-Datei aus, die sich im <code>docs</code> Verzeichnis im Projekt befindet.</p> <p>Diese sieht im Augenblick so aus.</p> <pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://www.mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n\n## Project layout\n\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre> <p>Eine einfache Maskierung ist v\u00f6llig ausreichend. Fokussieren Sie sich auf die spezifischen Texte, die \u00fcbersetzt werden m\u00fcssen, und vermeiden Sie \u00fcberm\u00e4\u00dfige Maskierung. Das bedeutet, dass Sie lediglich die relevanten Textteile mit den Maskierungszeichen <code>[[</code> und <code>]]</code> umschlie\u00dfen sollten, um eine pr\u00e4zisere \u00dcbersetzung zu erm\u00f6glichen. Bei mehreren S\u00e4tzen sollte selbstverst\u00e4ndlich der gesamte Abschnitt maskiert werden, damit DeepL den Kontext besser erfassen kann.</p> <p>In unserem Beispiel w\u00e4re dies dann am sinnvollsten.</p> <pre><code># [[Welcome to MkDocs]]\n\n[[For full documentation visit]] [mkdocs.org](https://www.mkdocs.org).\n\n## [[Commands]]\n\n* `mkdocs new [dir-name]` - [[Create a new project.]]\n* `mkdocs serve` - [[Start the live-reloading docs server.]]\n* `mkdocs build` - [[Build the documentation site.]]\n* `mkdocs -h` - [[Print help message and exit.]]\n\n## [[Project layout]]\n\n    mkdocs.yml    # [[The configuration file.]]\n    docs/\n        index.md  # [[The documentation homepage.]]\n        ...       # [[Other markdown pages, images and other files.]]\n</code></pre> <p>Bei der n\u00e4chsten Ausf\u00fchrung von <code>mkdocs serve</code> werden alle maskierten Texte automatisch \u00fcbersetzt, die Delimiter entfernt und die Quell- sowie Zielsprache korrekt auf der Seite angezeigt. Das Sprachmen\u00fc erm\u00f6glicht es dann, zu den einzelnen Sprachversionen zu navigieren.</p> <p>Solange der <code>serve</code>-Modus aktiviert ist, werden s\u00e4mtliche \u00dcbersetzungen als Entwurf angezeigt, um den Zugriff auf die \u00dcbersetzungs-Api zu reduzieren. Wenn <code>serve</code>, <code>build</code> oder <code>gh-dploy</code> erneut aufgerufen werden, werden die \u00dcbersetzungen fortgesetzt und die Entw\u00fcrfe entfernt.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#ubersetzung-manuell-verfeinern","title":"\u00dcbersetzung manuell verfeinern","text":"<p>Falls die automatische \u00dcbersetzung unzureichend ist oder bestimmte Zeichen oder Formatierungen nicht richtig \u00fcbersetzt wurden, besteht die M\u00f6glichkeit, die entsprechenden JSON-Dateien im Verzeichnis <code>locales</code> im Hauptverzeichnis des Projekts zu bearbeiten.</p> <p>Der Inhalt der <code>index.json</code> der deutschen Sprachvariante sieht jetzt so aus.</p> <pre><code>{\n    \"Welcome to MkDocs\": {\n        \"__active__\": true,\n        \"de\": \"Willkommen bei MkDocs\"\n    },\n    \"For full documentation visit\": {\n        \"__active__\": true,\n        \"de\": \"Die vollst\\u00e4ndige Dokumentation finden Sie unter\"\n    },\n    \"Create a new project.\": {\n        \"__active__\": true,\n        \"de\": \"Erstellen Sie ein neues Projekt.\"\n    },\n    \"Start the live-reloading docs server.\": {\n        \"__active__\": true,\n        \"de\": \"Starten Sie den live-reloadenden Doku-Server.\"\n    },\n    \"Build the documentation site.\": {\n        \"__active__\": true,\n        \"de\": \"Erstellen Sie die Dokumentationsseite.\"\n    },\n    \"Print help message and exit.\": {\n        \"__active__\": true,\n        \"de\": \"Hilfemeldung drucken und beenden.\"\n    },\n    \"Project layout\": {\n        \"__active__\": true,\n        \"de\": \"Projekt-Layout\"\n    },\n    \"The configuration file.\": {\n        \"__active__\": true,\n        \"de\": \"Die Konfigurationsdatei.\"\n    },\n    \"The documentation homepage.\": {\n        \"__active__\": true,\n        \"de\": \"Die Homepage der Dokumentation.\"\n    },\n    \"Other markdown pages, images and other files.\": {\n        \"__active__\": true,\n        \"de\": \"Andere Markdown-Seiten, Bilder und andere Dateien.\"\n    }\n}\n</code></pre> <p>Jeder Datensatz beinhaltet den Sprachschl\u00fcssel als Attributnamen, w\u00e4hrend der \u00fcbersetzte Text im untergeordneten Attribut <code>de</code> als Wert dargestellt wird. Solange der Sprachschl\u00fcssel konstant bleibt, wird Langly immer den Text des <code>de</code>-Attributs in diesem Beispiel nutzen. Sollte der Sprachschl\u00fcssel versehentlich ver\u00e4ndert werden, kann Langly die Zuordnung nicht mehr korrekt durchf\u00fchren, was dazu f\u00fchrt, dass die \u00dcbersetzung erneut vorgenommen wird und der manipulierte Datensatz entfernt wird.</p> <p>Das <code>__active__</code>-Attribut wird von Langly genutzt, um festzustellen, ob der Datensatz weiterhin ben\u00f6tigt wird, und entfernt ihn bei der n\u00e4chsten Ausf\u00fchrung.</p>"},{"location":"blog/2025/mkdocs-create_multilingual_website_mkdocs_material_langly/#fazit","title":"Fazit","text":"<p>Ab diesem Punkt kann den Dokumentationen und HowTo\u2019s von MkDocs oder Material gefolgt werden, um Ihre Webseite weiter auszubauen. Das Langly-Plugin wird die \u00dcbersetzung der maskierten Texte automatisch \u00fcbernehmen.</p> <p>Das war es auch schon. Viel Spa\u00df beim Erstellen Ihrer mehrsprachigen Webseite oder Dokumentation mit MkDocs, Material und Langly.</p> <p>Viel Erfolg!</p>"},{"location":"blog/2024/powershell-deploy_autodesk_software/","title":"Verteilung von Autodesk-Software mit ODIS-Installer und PowerShell unter Vermeidung des Double-Hop-Problems","text":"<p>Seitdem Autodesk sein Deployment-System auf den ODIS-Installer umgestellt hat, laufen alle Verteilungen, die unbeaufsichtigt \u00fcber den SYSTEM-Account ausgerollt werden, ohne Erfolgscode endlos weiter.</p> <p>Die genaue Fehlermeldung im ODIS-Log lautet:</p> <pre><code>2023-06-15T15:17:04.012 [DDA: 2196, single] [Installer INFO] [ Autodesk::DDA::SdkAgent::Listen::&lt;lambda_8f7c2cafda285d6f3324fbe86a24bae4&gt;::operator () ] [IPC] ChannelWin::Listen: WaitForSingleObject timeout. error_code: 997, pipe_name: \\\\.\\pipe\\adsk_dda_sdk\n</code></pre> <p>Nach einer Weile scheint der Installer-Dienst auch beendet zu werden, sendet aber keinen Exit-Code mehr.</p> <p>Ich habe viele Deployment-Suiten ausprobiert, aber das Resultat ist immer dasselbe, wenn der SYSTEM-Account zum Einsatz kommt.</p> <p>Um das Problem vor\u00fcbergehend zu l\u00f6sen, bis Autodesk das Problem erkennt und behebt, habe ich nun L\u00f6sungsans\u00e4tze entwickelt, die mir hier bei der Arbeit Abhilfe verschaffen.</p> <p>Mein geplanter Ansatz war, die Verteilung \u00fcber PowerShell zu realisieren, aber dabei stie\u00df ich erneut auf eine weitere H\u00fcrde, die die Kerberos-Authentifizierung mit sich bringt: das sogenannte Double-Hop-Problem, da meine Softwarepakete in CIFS-Freigaben lagern.</p> <p>Kerberos l\u00e4sst es nicht zu, dass nach einer Authentifizierung auf einem Remote-PC eine weitere Authentifizierung \u00fcber diesen Endpunkt zu anderen entfernten Zielen durchgef\u00fchrt wird. Es gibt also keinen zweiten Hop. Um das Problem zu umgehen, gibt es wenige, aber komplizierte Wege oder einen, bei dem jetzt alle sagen werden: \"Oh mein Gott, tu das nicht\", aber ich hau es einfach mal raus.</p> <p>Die L\u00f6sung ist, CredSSP nur tempor\u00e4r als Punkt-zu-Punkt-Verbindung zu nutzen und nach dem Deployment wieder zu entsch\u00e4rfen. Es sollte unter keinen Umst\u00e4nden unternehmensweit erlaubt werden.</p> <p>Info</p> <p>CredSSP hat keinen Single-Hop-Zwang. Authentifizierungen k\u00f6nnen in einer CredSSP-Sitzung weiterverwendet werden. Sollte das unternehmensweit und dauerhaft erlaubt werden, kann das zu erheblichen Sicherheitsproblemen f\u00fchren.</p> <p>Hier nun das Skript f\u00fcr alle, die vor dem selben Problem stehen.</p> <p>Das hier beschriebene Skript ist bewusst flach gehalten, um es verst\u00e4ndlich zu machen und den weiteren Ausbau durch Euch so einfach wie m\u00f6glich zu gestalten.</p> <p>Info</p> <p>Bitte beachten Sie, dass in diesem Beispiel CredSSP nur tempor\u00e4r verwendet wird und nach dem Deployment wieder deaktiviert wird. Zudem wird ausschlie\u00dflich der angegebene Remote-Computer delegiert und nicht das gesamte Netzwerk.</p> <p>Nach gr\u00fcndlicher Validierung hat sich dieser Ansatz als sicherer und einfacher Weg erwiesen, um das gew\u00fcnschte Ziel zu erreichen.</p> <p>Warning</p> <p>Dieses Skript muss mit administrativen Rechten ausgef\u00fchrt werden, um die CredSSP-Authentifizierung zu aktivieren und zu deaktivieren.</p> <pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '-i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n\n# Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n\ntry {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n\n    # Create a new PSSession with CredSSP authentication\n    $session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n\n    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\nfinally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Erkl\u00e4ren wir nun die einzelnen Schritte des Skripts:</p> <p><pre><code># Define the parameters with your own values\n\nparam (\n[string]$Computer = \"&lt;remote-computer&gt;\",\n[string]$Name = \"Autodesk Revit 2024\",\n[string]$Installer = '&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe',\n[string]$Argument = '\"&lt;share&gt;\\Autodesk Revit 2024\\image\\Installer.exe\" -i deploy --offline_mode -q -o \"&lt;share&gt;\\Autodesk Revit 2024\\image\\Collection.xml\" --installer_version \"2.9.0.31\"'\n)\n</code></pre> Das Skript kann entweder mit Parametern aufgerufen werden, oder Sie tragen Ihre spezifischen Werte direkt ein. Die notwendigen Informationen f\u00fcr den Installer und die Argumente finden Sie nach der Image-Erstellung im entsprechenden Installations-Skript. Ein typischer Name f\u00fcr eine Revit-Installation k\u00f6nnte beispielsweise <code>Install Autodesk Revit 2024.bat</code> sein.</p> <p>Die Parameter f\u00fcr die Silent-Installation und Deinstallation sind ebenfalls dort hinterlegt. Diese Parameter erm\u00f6glichen eine unbeaufsichtigte Installation bzw. Deinstallation der Software, was besonders in gro\u00dfen IT-Umgebungen von Vorteil ist.</p> <p>F\u00fcr weitere Details und eine ausf\u00fchrliche Anleitung zur Bereitstellung von Autodesk-Software, besuchen Sie bitte den folgenden Artikel:</p> <p>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</p> <pre><code># Prompt for user credentials\n$cred = Get-Credential -Message \"Enter your credentials\"\n</code></pre> <p>Um eine PowerShell-Sitzung unter Verwendung von CredSSP zu starten, ben\u00f6tigen wir die Anmeldeinformationen eines Benutzers mit den erforderlichen Rechten zur Durchf\u00fchrung von Installationen. In den meisten F\u00e4llen handelt es sich dabei um den Domain-Admin. Ein Dialogfeld wird angezeigt, in dem Sie die Anmeldeinformationen eingeben k\u00f6nnen.</p> <pre><code>try {\n    # Enable CredSSP on the client\n    $null = Enable-WSManCredSSP -Role Client -DelegateComputer $Computer -Force\n\n    # Enable CredSSP on the server (if not already enabled)\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        $null = Enable-WSManCredSSP -Role Server -Force\n    }\n</code></pre> <p>Hier wird CredSSP sowohl auf dem Client als auch auf dem Server aktiviert. Es ist hilfreich, die Begriffe \"Verteiler\" (Client) und \"Empf\u00e4nger\" (Server) zu verwenden, um die Rollen klarer zu definieren. Der Try-Block umfasst alle potenziell fehleranf\u00e4lligen Aktionen und kann nach Belieben angepasst werden. F\u00fcr den Anfang ist diese Struktur einfach und robust.</p> <pre><code># Create a new PSSession with CredSSP authentication\n$session = New-PSSession -ComputerName $Computer -Credential $cred -Authentication Credssp\n</code></pre> <p>Hier wird eine neue PowerShell-Sitzung mit CredSSP-Authentifizierung erstellt.</p> <pre><code>    # Execute the script on the remote computer\n    Invoke-Command -Session $session -ScriptBlock {\n        param ($Name, $Installer, $Argument)\n\n        # Output a message before starting the installation process\n        Write-Host \"$Name is being installed...\"\n\n        # Start the installation process\n        $process = Start-Process -FilePath $Installer -ArgumentList $Argument -PassThru\n\n        # Output the process ID\n        Write-Host \"The installation process has started. Process ID: $($process.Id)\"\n\n        # Wait for the installation process to complete\n        $process.WaitForExit()\n\n        Write-Host \"The installation process completed with exit code $($process.ExitCode).\"\n\n    } -ArgumentList $Name, $Installer, $Argument\n}\n</code></pre> <p>Hier wird das Skript auf dem Remote-Computer ausgef\u00fchrt. Der Name, der Installer und die Argumente werden als Parameter \u00fcbergeben. An dieser Stelle endet der Try-Block.</p> <pre><code>finally {\n    # Close the PSSession\n    if ($session) {\n        Remove-PSSession -Session $session\n    }\n\n    # Disable CredSSP on the server\n    Invoke-Command -ComputerName $Computer -Credential $cred -ScriptBlock {\n        Disable-WSManCredSSP -Role Server\n    }\n\n    # Disable CredSSP on the client\n    Disable-WSManCredSSP -Role Client\n}\n</code></pre> <p>Im Finally-Block wird die PowerShell-Sitzung geschlossen und CredSSP auf dem Server und Client deaktiviert. Der Finally-Block wird immer ausgef\u00fchrt, unabh\u00e4ngig davon, ob der Try-Block erfolgreich war oder nicht. Bitte beachten Sie, dass das Abfangen von Fehlern auch \u00fcber einen m\u00f6glichen Exception-Block erfolgen kann. Dies \u00fcberlasse ich dem findigen Leser.</p> <p>Dieses Skript dient mir nun selbst als Grundlage f\u00fcr Erweiterungen. Ich werde nun daran arbeiten, ein \u00fcbergeordnetes Skript zu entwickeln, um die Installationen in gro\u00dfen Mengen zu steuern und zu \u00fcberwachen.</p> <p>Quellangaben</p> <ul> <li>https://www.autodesk.com/support/download-install/admins/account-deploy/deploy-from-autodesk-account</li> <li>https://learn.microsoft.com/en-us/powershell/scripting/security/remoting/ps-remoting-second-hop?view=powershell-7.4</li> </ul>"},{"location":"doc/decore/","title":"Basisklasse","text":""},{"location":"doc/decore/#decore","title":"<code>decore</code>","text":""},{"location":"doc/decore/#decore.Decore","title":"<code>Decore</code>","text":"<p>               Bases: <code>object</code></p>"},{"location":"doc/decore/#decore.Decore.app","title":"<code>app(title, desc=None, role=0, dev=True)</code>","text":"<p>Eine Funktion zum er\u00f6ffnen einer GUI-Dashboard-Anwendung. Sie wird als \"Decorator\" verwendet.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Der Titel der App.</p> required <code>desc</code> <code>str</code> <p>Die Beschreibung der App.</p> <code>None</code> <code>role</code> <code>int</code> <p>Die Rollenangabe dient dazu, nur berechtigte Elemente ans Framework zu liefern. Rolle 0 erm\u00f6glicht es dem Gast-Account, sofort auf die App zuzugreifen. Alles \u00fcber 0 erfordert eine Anmeldung.</p> <code>0</code> <code>dev</code> <code>bool</code> <p>Der Entwicklungsmodus aktiviert die CORS-Header, bereitet die Anwendung beim ersten Lauf vor, aktiviert weitere Dev-Features und erm\u00f6glicht es, die App auf einem lokalen Server zu testen.</p> <code>True</code> <pre><code>    @decore.app(title='decore Sample', role=0)\n    def main():\n        pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.base","title":"<code>base(icon=None, title=None, desc=None, hide=False, role=0, model=Decore_model, private=False, stretch=False, navigation='main-top')</code>","text":"<p>Eine Funktion zum registrieren einer Basis in der GUI-Dashboard-Anwendung. Sie wird als \"Decorator\" verwendet.</p> <p>Die Basis ist das Tr\u00e4gerelement f\u00fcr die Ansicht und die Vorlage f\u00fcr die Datenquelle im Frontend.</p> <p>:param str icon: Das Symbol der Basis. :param str title: Der Titel der Basis. :param str desc: Die Beschreibung der Basis. :param Model model: Das Datenmodell der Basis.</p> <p>.. code-block:: python</p> <pre><code>@decore.base(icon='mdi-account', title='Person', desc='A basis for managing personal data', model=Person)\nclass Person_base:\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.view","title":"<code>view(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='default', fields=[], filters=[], query={}, pag_type='client', pag_recs=16)</code>","text":"<p>Eine Funktion zur Registrierung einer Ansicht. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Ansicht ist ein Container f\u00fcr die Anzeige von Daten.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Ansicht in einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Ansicht. :param str title: Der Titel der Ansicht. :param str desc: Die Beschreibung der Ansicht. :param str type: Gibt an wie die Datens\u00e4tze angezeigt werden. Der Wert <code>table</code> stellt die Datens\u00e4tze in einer Tabelle dar. :type type: Literal['default'] :param list fields: Die Felder, die in der Ansicht angezeigt werden. :param list filters: Die Filter, die in der Ansicht angezeigt werden. :param dict query: Die Abfrage, die in der Ansicht angezeigt wird. :param str pag_type: W\u00e4hlt die Methode wie die Datens\u00e4tze der View geladen werden. Der Wert <code>client</code> l\u00e4dt alle Datens\u00e4tze auf einmal und \u00fcberl\u00e4sst den Seitenaufbau dem Frontend. :type pag_type: Literal['client'] :param int pag_recs: Gibt an wieviele Datens\u00e4tze auf einer Seite der Ansicht angezeigt werden sollen. <code>16</code> ist die Standardeinstellung.</p> <p>.. code-block:: python</p> <pre><code>@decore.view(icon='mdi-account', title='Person', desc='A view for managing personal data', type='table', fields=[Person.id, Person.name, Person.age], filters=[Person.name, Person.age], query={'name__eq': 'Kemo'}, pag_type='client', pag_recs=16)\ndef person_view():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.dialog","title":"<code>dialog(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='standard', activator='empty')</code>","text":"<p>Eine Funktion zur Registrierung eines Dialogs. Sie wird als \"Decorator\" verwendet.</p> <p>Der Dialog ist das Tr\u00e4gerelement f\u00fcr Widgets </p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn der Dialog in einer Ansicht einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Dialogs. :param str title: Der Titel des Dialogs. :param str desc: Die Beschreibung des Dialogs. :param str type: Gibt an wie der Dialog die Widgets darstellen wird. Der Wert <code>standard</code> stellt die untergeordneten Widgets und Sub-Widgets untereinander dar. :type type: Literal['standard'] :param str display: Der Anzeigetyp des Dialogs. Standardwert ist <code>draw-half</code>. :type display: Literal['modal', 'draw-half', 'draw-full'] :param str activator: Der Aktivatortyp des Dialogs. \u00dcber den Wert <code>none</code> wird der Dialog sofort beim OnLoad Ereignis der View angezeigt. Der Wert <code>default</code> stellt den Dialog im Top-Menu der View dar. Der Wert <code>context</code> stellt den Dialog im Kontextmen\u00fc eines Items der View dar. Der Wert <code>click</code> zeigt den Dialog dann an wenn man einen Datensatz anklickt. :type activator: Literal['none', 'default', 'context', 'click']</p> <p>.. code-block:: python</p> <pre><code>@decore.dialog(icon='mdi-account', title='Person', desc='A dialog for managing personal data', type='standard', display='drawer', activator='default-menu')\ndef person_dialog():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.widget","title":"<code>widget(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='default', layout='ceta', fields=[])</code>","text":"<p>Eine Funktion zur Registrierung eines Widgets. Sie wird als \"Decorator\" verwendet.</p> <p>Ein Widget dient zur Darstellung und Interaktion mit dem Datensatz. Es erh\u00e4lt die Daten, die der Dialog-Aktivator vorgibt. Der Wert <code>none</code> \u00fcbergibt den letzten Datensatz der Datenbanktabelle. Der Wert <code>default</code> \u00fcbergibt einen nur mit Default-Werten gef\u00fcllten Datensatz. Beim Wert <code>context</code> \u00fcbergibt es den Datensatz, der im Kontextmen\u00fc der Ansicht ausgew\u00e4hlt wurde. Und <code>click</code> \u00fcbergibt den Datensatz, der angeklickt wurde. </p> <p>Widgets, welche aus einer fremden Basis einem Dialog zugeordnet werden, erg\u00e4nzen die relationalen Felder eines Default-Items der fremden Datenquelle mit den Daten des aktivierten Items. (Der Satz ist Schei\u00dfe zu verstehen, aber er trifft genau das, was es tut). In der Sample Anwendung verwende ich das beim Zuweisen von \"Contracts\" zu einer \"Person\". </p> <p>Es gibt aber auch Widgets, die mehrere Datens\u00e4tze darstellen k\u00f6nnen, wie im Beispiel davor werden hier auch die Relationen verwendet, um nur Daten abzubilden, die etwas mit dem gew\u00e4hlten Item zu tun haben.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn das Widget in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Widgets. :param str title: Der Titel des Widgets. :param str desc: Die Beschreibung des Widgets. :param str type: Gibt an wie das Widget die Daten darstellen wird. Standardwert ist <code>default</code>. :type type: Literal['default', 'info', 'form', 'table'] :param list fields: Die Felder, die in dem Widget angezeigt werden.</p> <p>.. code-block:: python</p> <pre><code>@decore.widget(icon='mdi-account', title='Person', desc='A widget for managing personal data', type='form', layout='cera', fields=[Person.name, Person.age])\ndef person_widget():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.template","title":"<code>template(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0)</code>","text":"<p>Eine Funktion zur Registrierung einer Vorlage. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Vorlage ist HTML-Code der im Layout der View oder des Widgets gerendert wird.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Vorlage in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Vorlage. :param str title: Der Titel der Vorlage. :param str desc: Die Beschreibung der Vorlage. :param str name: Der Name der Vorlage.</p> <p>.. code-block:: python</p> <pre><code>@decore.template(icon='mdi-account', title='Person', desc='A html template', name='person_template')\ndef person_template():\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.hook","title":"<code>hook(parent_id=None, icon=None, title=None, desc=None, role=0)</code>","text":"<p>Eine Funktion zur Registrierung eines \"Hakens\". Sie wird als \"Decorator\" verwendet. </p> <p>Ein Haken ist eine Funktion zum abfangen des Load-Ereignisses der \u00fcbergeordneten Komponente. Er kann dazu genutzt werden um vor dem Laden einer Komponente Bedingungen im Backend zu pr\u00fcfen und gegebenenfalls den Pool zu manipulieren oder die Route zu \u00e4ndern. </p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn der Haken in einem Dialog einer anderen Basis gerendert werden soll. :param str icon: Das Symbol des Hakens. :param str title: Der Titel des Hakens. :param str desc: Die Beschreibung des Hakens. :param str name: Der Name des Hakens.</p> <p>.. code-block:: python</p> <pre><code>@decore.hook(icon='mdi-account', title='Person', desc='A hook to catch events')\ndef sample_hook(**kwargs):\n    pass\n</code></pre>"},{"location":"doc/decore/#decore.Decore.action","title":"<code>action(parent_id=None, icon=None, title=None, desc=None, hide=False, role=0, type='standard', activator='none', errors=True)</code>","text":"<p>Eine Funktion zur Registrierung einer Aktion. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Aktion ist die tats\u00e4chliche Interaktion zwischen dem Benutzer und dem Backend.</p> <p>:param str parent_id: Die ID des \u00fcbergeordneten Elements. Nur zu setzen, wenn die Aktion in einem Widget einer anderen Basis gerendert werden soll. :param str icon: Das Symbol der Aktion. :param str title: Der Titel der Aktion. :param str desc: Die Beschreibung der Aktion. :param str type: Gibt an was die Aktion kann. Standardwert ist <code>standard</code>. :type type: Literal['standard', 'submit'] :param str activator: Gib an, wie die Aktion ausgel\u00f6st wird. :type activator: Literal['default', 'context', 'click'] :param bool errors: Gibt an, ob die Aktion Validierungsfehler zur\u00fcckgeben kann. Standardwert ist <code>True</code>. (Im Augenblick wirkt sich das nur auf den Typen <code>submit</code> aus.)</p> <p>.. code-block:: python</p> <pre><code>@decore.action(icon='mdi-account', title='Person', desc='A action for managing personal data', type='submit')\ndef sample_action(**kwargs):\n    pass\n</code></pre> <p>Die Aktionen durchlaufen ein Modul, welches die erhaltenen Daten aufbereitet und als Keyword-Parameter an die dekorierte Funktion \u00fcbergibt. Es ist alles in den <code>kwargs</code> zu finden und man macht sich diese einfach verf\u00fcgbar. Der Parameter <code>item</code> ist ein Beispiel daf\u00fcr und repr\u00e4sentiert den vom Frontend zur\u00fcckgegebenen Datensatz. Um herauszufinden, was alles noch in den <code>kwargs</code> steckt, bitte den Debugger benutzen.</p>"},{"location":"doc/decore/#decore.Decore.function","title":"<code>function(type='shot')</code>","text":"<p>Eine Funktion zur Registrierung einer Funktion in der \u00fcbergeordneten Base. Sie wird als \"Decorator\" verwendet.</p> <p>Eine Funktion wird direkt nach der Zusammenstellung des Metadaten-Pool ausgef\u00fchrt. Mit Funktionen kann man die Logik erweitern, Dinge vorbereiten oder Hintergrundaufgaben erledigen. Sie agieren als Instanzmethoden der Basis und erhalten damit den objektorientierten Ansatz.</p> <p>:param str type: Gibt an wie eine Funktion ausgef\u00fchrt wird. Mit dem Wert <code>shot</code> wird sie nur einmal ausgef\u00fchrt. Der Wert <code>work</code> wird in einem Thread ausgef\u00fchrt und kann somit Schleifen abarbeiten die niemals enden bis der Main-Thread endet. :type type: Literal['shot', 'work']</p> <p>.. code-block:: python</p> <pre><code>@decore.function(type='shot')\ndef sample_function(self):\n    pass\n</code></pre>"},{"location":"doc/fields/","title":"Felder und Typen","text":""},{"location":"doc/fields/#classes.decore_fields","title":"<code>classes.decore_fields</code>","text":""},{"location":"doc/fields/#classes.decore_fields.BackrefMetaField","title":"<code>BackrefMetaField</code>","text":"<p>               Bases: <code>MetaField</code></p> <p>Das BackrefMetaField wird ben\u00f6tigt damit decore Front Beziehungen zwischen Modellen darstellen kann. Es kann z.B. dem Filter oder einem Formular zugewiesen werden. Es ist ein MetaField und erh\u00e4lt keine Spalte in der Datenbank.</p> <p>Parameters:</p> Name Type Description Default <code>verbose_name</code> <code>str</code> <p>Ein vom Benutzer lesbarer Name f\u00fcr das Feld.</p> <code>None</code> <code>help_text</code> <code>str</code> <p>Zus\u00e4tzlicher Text, der in decore Front angezeigt wird.</p> <code>None</code> <code>filter_fields</code> <code>list</code> <p>Eine Liste vom Typ String. Es werden nur die angegebenen Felder im Filter angezeigt. Wenn <code>empty</code>, werden alle Felder angezeigt.</p> <code>[]</code> <code>choice_query</code> <code>dict</code> <p>Ein <code>dictonary</code>, das eine Abfrage enth\u00e4lt, die beim laden von Optionen (z.B. in Auswahlfeldern im Frontend) ber\u00fccksichtigt wird. Die Abfrage muss sich auf das Referenzmodell beziehen.</p> <code>{}</code> <p>Warning</p> <p>Der Name des <code>BackRefMetaField</code> muss mit dem Wert des angegebenen <code>backref</code> Parameters im ForeignKey oder ManyToMany Feldes im Referenzmodell \u00fcbereinstimmen. Im folgendem Beispiel ist der Name des <code>BackRefMetaField</code> gleich <code>accounts</code> und ebenso der Wert des ForeignKey <code>backref</code> Parameters.</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre> <pre><code>class Account(Conform_model):\n    user = ForeignKeyField(User, backref='accounts', null=True, verbose_name='User')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.BooleanField","title":"<code>BooleanField</code>","text":"<p>               Bases: <code>BooleanField</code></p> <p>A field to store boolean values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.CharField","title":"<code>CharField</code>","text":"<p>               Bases: <code>CharField</code></p> <p>A field to store char values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool unique: If True, the field must be unique in database table. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.DateField","title":"<code>DateField</code>","text":"<p>               Bases: <code>DateField</code></p> <p>A field to store date values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.DateTimeField","title":"<code>DateTimeField</code>","text":"<p>               Bases: <code>DateTimeField</code></p> <p>A field to store datetime values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.FloatField","title":"<code>FloatField</code>","text":"<p>               Bases: <code>FloatField</code></p> <p>A field to store float values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.PasswordField","title":"<code>PasswordField</code>","text":"<p>               Bases: <code>Field</code></p> <p>:warning      The keybase is a KeePass file and should be protected by setting the correct access rights (ACL).</p> <p>A field to store passwords in the keybase and to use them again.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    password = PasswordField(null=False, verbose_name='Password')\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.ForeignKeyField","title":"<code>ForeignKeyField</code>","text":"<p>               Bases: <code>ForeignKeyField</code></p> <p>A field to represent a one-to-many relationship between two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p>"},{"location":"doc/fields/#classes.decore_fields.IntegerField","title":"<code>IntegerField</code>","text":"<p>               Bases: <code>IntegerField</code></p> <p>A field to store integer values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"doc/fields/#classes.decore_fields.ManyToManyField","title":"<code>ManyToManyField</code>","text":"<p>               Bases: <code>ManyToManyField</code></p> <p>A field to represent a many-to-many relationship between two models. It is a MetaField and does not get a column in the database. However, a through model is created by decore Base, which represents the relationship between the two models.</p> <p>:param Model model: The model to which the relationship is to be established. :param str backref: The name of the field in the reference model that represents the relationship to the model. :param bool null: If True, the field is allowed to be null. Defaults to False. :param str verbose_name: A human-readable name for the field. :param str help_text: Additional text to be displayed in decore Front. :param list filter_fields: A List of type string. Only the speciefied fields will be displayed in the filter. If None, all fields will be displayed. :param dict choice_query: A dictonary containing a query to be used when querying choices (e.g. in selection fields in the frontend). The query always refers to the reference model.</p> <p>.. code-block:: python</p> <pre><code>class Account(Conform_model):\n    users = ManyToManyField(User, backref='accounts', null=True, verbose_name='Users')\n    prefix = CharField(verbose_name='Mail prefix')\n    domain = CharField(verbose_name='Mail domain', default='example.com')\n</code></pre> <p>.. code-block:: python</p> <pre><code>class User(Conform_model):\n    username = CharField(verbose_name='Username')\n    accounts = BackRefMetaField(null=True, verbose_name='Accounts', choice_query={'domain__eq': 'example.com'}\n</code></pre>"},{"location":"doc/fields/#classes.decore_fields.TextField","title":"<code>TextField</code>","text":"<p>               Bases: <code>TextField</code></p> <p>A field to store text values.</p> <p>:param bool null: If True, the field is allowed to be null. Defaults to False. :param bool default: The default value for the field. Defaults to None. :param str help_text: Additional text to be displayed in decore Front. :param str verbose_name: A human-readable name for the field.</p>"},{"location":"sub/mkdocs_material_langly/","title":"MkDocs Material Langly Plugin","text":"<p>Das Langly-Plugin f\u00fcr MkDocs ist ein Plugin, das Sprachunterst\u00fctzung und \u00dcbersetzungen f\u00fcr Webseiten bietet, die mit MkDocs in Verwendung des Material-Themes erstellt wurden. Es erm\u00f6glicht die einfache Verwaltung mehrsprachiger Inhalte und die automatische \u00dcbersetzung von Texten, um eine breitere Zielgruppe zu erreichen. Es erf\u00fcllt bewusst keine der derzeitigen \u00dcbersetzungsstandards, sondern geht einen ganz eigenen aber offenen Weg.</p> <p>Dieses Plugin wurde f\u00fcr Verwendung des gro\u00dfartigen Material-Themes erstellt und bietet Funktionalit\u00e4ten um z.B. auch den Blogbereich zu Internationalisieren.</p> <p>Die derzeit einzige \u00dcbersetzungsengine ist Deepl und es wird ein DeepL-Api-Key ben\u00f6tigt, um das Plugin zu verwenden.</p>"},{"location":"sub/mkdocs_material_langly/#direkte-unterstutze-plugins-fur-mkdocs","title":"Direkte unterst\u00fctze Plugins f\u00fcr mkdocs","text":"<p>Diese Auflistung sind Plugins, die bei der Entwicklung von Langly direkt verwendet wurden und als kompatibel gelten. Aber es ist nicht ausgeschlossen, dass auch andere Plugins funktionieren.</p> <ul> <li>mkdocs-material</li> <li>mkdocs-strings</li> <li>mkdocs-glightbox</li> </ul> <p>Diese gro\u00dfartigen Plugins ben\u00f6tigen definitiv volle Unterst\u00fctzung und Anerkennung.</p> <p>Note</p> <p>Das Plugin ist noch in der Entwicklung und es wird empfohlen, die Dokumentation zu lesen, um die Funktionalit\u00e4ten und Einschr\u00e4nkungen zu verstehen. Ich bitte auch alle Anforderungen und \u00c4nderungsvorschl\u00e4ge in den GitHub-Issues zu melden.</p>"},{"location":"sub/mkdocs_material_langly/#lasst-uns-anfangen","title":"Lasst uns Anfangen","text":"<p>F\u00fcr den Anfang werden ein paar vorl\u00e4ufige Schritte ben\u00f6tigt, um das Plugin zu benutzen.</p> <ul> <li> mkdocs mit installiertem Material-Theme</li> <li> Ein Deepl-Free-Account wird ben\u00f6tigt</li> </ul>"},{"location":"sub/mkdocs_material_langly/#installation-des-plugins","title":"Installation des Plugins","text":"<p>Um das Plugin zu verwenden, m\u00fcssen Sie es zuerst installieren. F\u00fchren Sie dazu den folgenden Befehl aus:</p> <pre><code>pip install mkdocs-material-langly\n</code></pre>"},{"location":"sub/mkdocs_material_langly/#api-key-bereitstellen","title":"Api-Key bereitstellen","text":"<p>Um das Plugin zu verwenden, ben\u00f6tigen Sie einen Deepl-Api-Key. Sie k\u00f6nnen diesen kostenlosen von der Deepl-Website erhalten.</p> <p>Nachdem Sie den Api-Key erstellt haben, erstellen Sie eine Datei namens <code>auth_key.json</code> im Wurzelverzeichnis Ihres Projekts und f\u00fcgen folgenden Inhalt ein:</p> <pre><code>  {\n      \"deepl\": \"DEEPL-API-KEY\"\n  }\n</code></pre> <p>Ersetzen Sie <code>DEEPL-API-KEY</code> durch Ihren eigenen Api-Key.</p>"},{"location":"sub/mkdocs_material_langly/#api-key-schutzen","title":"Api-Key sch\u00fctzen","text":"<p>Danger</p> <p>Bitte lesen Sie diesen Abschnitt sorgf\u00e4ltig durch und beachten Sie den Api-Key in der .gitignore auszuschlie\u00dfen und auch auf jede erdenkliche Weise vor dem Upload ins Internet zu sch\u00fctzen.</p> <p>\u00d6ffnen Sie die Datei .gitignore im Wurzelverzeichnis und f\u00fcgen Sie die Zeile <code>auth_key.json</code> hinzu, um zu verhindern das die Datei versehentlich hochgeladen wird. Anschlie\u00dfend bitte auch online pr\u00fcfen, dass der Key nicht im Repo zu finden ist.</p>"},{"location":"sub/mkdocs_material_langly/#konfiguration-des-plugins","title":"Konfiguration des Plugins","text":"<p>Nach der Installation k\u00f6nnen Sie das Plugin in Ihrer <code>mkdocs.yml</code>-Konfigurationsdatei aktivieren. Langly sollte dabei als letztes Plugin in der Liste stehen.</p> <p>Info</p> <p>Es m\u00fcssen keine sprachbezogenen Einstellungen am Material-Theme vorgenommen werden. Das bedeutet das die Optionen <code>theme&gt;language</code> und <code>extra&gt;alternate</code> durch das Plugin gesetzt werden.</p> <pre><code>site_url: https://&lt;example&gt;.com\n..\n..\n..\nplugins:\n  - search\n  - .\n  - .\n  - langly:\n      lang_switch: true\n      source:\n          name: Deutsch\n          lang: de\n      targets:\n        - name: English\n          lang: en-us\n</code></pre> <p>In dieser Konfiguration wird die Sprache Deutsch als Quellsprache und Englisch als Zielsprache festgelegt. Sie k\u00f6nnen beliebig viele Zielsprachen hinzuf\u00fcgen. Allerdings beeintr\u00e4chtigt das die <code>serve</code> Performance um so mehr. Die Option <code>site_url</code> sollte der Ver\u00f6ffentlichungsadresse Ihrer Website entsprechen damit die <code>sitemap</code> und <code>canonicals</code> korrekt funktionieren.</p> <p>Warning</p> <p>Wichtig ist dabei die Deepl-Language-Codes f\u00fcr <code>source</code> und <code>target</code> zu verwenden. Diese sind auf folgender Website zu finden: Deepl Language Codes</p> <p>Nachdem Sie die Konfiguration vorgenommen haben, k\u00f6nnen Sie die \u00dcbersetzungsfunktionen in Ihren Markdown-Dateien verwenden.</p>"},{"location":"sub/mkdocs_material_langly/#verwendung-des-plugins","title":"Verwendung des Plugins","text":"<p>Das Plugin analysiert Markdown-Texte und wertet maskierte Textpassagen aus, die mit <code>[[</code> und <code>]]</code> umschlossen sind. Diese <code>delimiter</code> werden beim Rendern der Seite entfernt und Quell sowie Zielsprache werden korrekt auf Ihrer Seite dargestellt. </p> <p>Gehen sie wie folgt vor, um Texte zu maskieren</p> <p><code>[[</code>Ihr Text<code>]]</code></p> <p>Der Text innerhalb der Maskierung wird dann von Langly automatisch \u00fcbersetzt.</p>"},{"location":"sub/mkdocs_material_langly/#ein-paar-einfache-beispiele","title":"Ein paar einfache Beispiele","text":""},{"location":"sub/mkdocs_material_langly/#satz","title":"Satz","text":"<p><code>[[</code>Dieser Text repr\u00e4sentiert Ihre Quellsprache<code>]]</code></p>"},{"location":"sub/mkdocs_material_langly/#absatz","title":"Absatz","text":"<p><code>[[</code>Dieser Absatz enth\u00e4lt mehrere S\u00e4tze in Ihrer Quellsprache. Es ist die empfohlene Art der Maskierung von Textpassagen und liefert Deepl mehr Kontext um eine bessere \u00dcbersetzung zu liefern.<code>]]</code></p>"},{"location":"sub/mkdocs_material_langly/#aufzahlung-mit-doppelpunkt","title":"Aufz\u00e4hlung mit Doppelpunkt","text":"<ul> <li><code>[[</code>Aufz\u00e4hlung<code>]]</code>:<code>[[</code>Wert nach dem Doppelpunkt<code>]]</code></li> </ul>"},{"location":"sub/mkdocs_material_langly/#changelog-und-features","title":"Changelog und Features","text":""},{"location":"sub/mkdocs_material_langly/#012","title":"0.1.2","text":"<ul> <li>Da der Algorithmus die Zeichen <code>[[</code> und <code>]]</code> als Maskierung f\u00fcr \u00fcbersetzbaren Text verwendet, k\u00f6nnen diese Zeichen nicht direkt im Text dokumentiert werden. Stattdessen werden <code>hints</code> verwendet, die nach der \u00dcbersetzung automatisch in <code>[[</code> und <code>]]</code> umgewandelt werden.</li> </ul>"},{"location":"sub/mkdocs_material_langly/#011-initial-release","title":"0.1.1 - Initial Release","text":"<ul> <li>Einf\u00fcgen einer \"index.html\" mit Umleitung zur Zielsprache nach Browsersprache.</li> <li>Konfigurieren Sie MKDocs und das Materialthema f\u00fcr jedes Build in der jeweiligen Sprache.</li> <li>Optionale Sprachumschaltung, die automatisch konfiguriert wird.</li> <li>Setzen aller offenen \u00dcbersetzungen w\u00e4hrend <code>serve</code> in den Draft-Mode, um den Zugriff auf die \u00dcbersetzungs-Api zu minimieren.</li> <li>Durchsuchen des Seiteninhaltes, um zus\u00e4tzliche \u00dcbersetzungen zu finden, die mit Plugins von Drittanbietern wie <code>mkdocs-strings</code> erstellt wurden.</li> <li>Speichern aller \u00dcbersetzungen in einer JSON-Datei pro Seite, um den Zugriff auf die \u00dcbersetzungs-Api zu minimieren und manuelle \u00c4nderungen zu erm\u00f6glichen.</li> <li>Konvertiert Markdown in HTML, \u00fcbersetzt und konvertiert zur\u00fcck, um Textformatierungen wie <code>code</code>, <code>strong</code> und <code>em</code> zu erhalten.</li> <li>Fixe-W\u00f6rter in Code-Tags mit tempor\u00e4ren HTML-Attributen erhalten.</li> <li>\u00dcbersetzung der Navigation</li> <li>Kopieren Sie die f\u00fcr gh-deploy erforderliche CNAME-Datei in das Stammverzeichnis des Build's.</li> <li>ERSETZT - Begrenzungszeichen (z.B. <code>[[</code> und <code>]]</code>) innerhalb einer Maskierung ignorieren.</li> </ul>"},{"location":"sub/mkdocs_material_langly/#feedback-und-unterstutzung","title":"Feedback und Unterst\u00fctzung","text":"<p>Ich freue mich \u00fcber jede Art von Feedback und Unterst\u00fctzung.</p> <p>Vielen Dank f\u00fcr Ihr Interesse an diesem Plugin!</p> <p>Viel Spa\u00df beim \u00dcbersetzen!</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/mkdocs/","title":"MkDocs","text":""},{"location":"blog/category/caldera/","title":"Caldera","text":""},{"location":"blog/category/powershell/","title":"Powershell","text":""}]}